{"pageProps":{"frontmatter":{"title":"Most Developers Lack These Useful JavaScript Features","date":"2022-02-19T14:03:17.293Z","tags":["#javascript"],"description":"Write less and do more with JavaScript. With JavaScript, you can do one thing in many different ways. Also, JavaScript is evolving with the release of every new ECMAScript specification, adding new useful methods and operators to make the code shorter, and somewhere more readable.","cover_image":"20220219140317-modern-javascript-features.png","readingTime":3},"slug":"20220219140317-modern-javascript-features","post":{"content":{"compiledSource":"var d=Object.defineProperty,u=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var s=(e,n,a)=>n in e?d(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,o=(e,n)=>{for(var a in n||(n={}))i.call(n,a)&&s(e,a,n[a]);if(r)for(var a of r(n))l.call(n,a)&&s(e,a,n[a]);return e},p=(e,n)=>u(e,h(n));var c=(e,n)=>{var a={};for(var t in e)i.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(e!=null&&r)for(var t of r(e))n.indexOf(t)<0&&l.call(e,t)&&(a[t]=e[t]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var t=a,{components:e}=t,n=c(t,[\"components\"]);return mdx(MDXLayout,p(o(o({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"1. Object.entries\"),mdx(\"p\",null,\"Most developers use \",mdx(\"inlineCode\",{parentName:\"p\"},\"Object.keys\"),\" method to iterate over an object. This method only returns an array of the object keys, not values. We can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"Object.entries\"),\" to get both key and value.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const person = {\n  name: \"John\",\n  age: 20,\n};\nObject.keys(person); // ['name', 'age']\nObject.entries(data); // [['name', 'John'], ['age', 20]]\n`)),mdx(\"p\",null,\"And to iterate over an object we can do the following:\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`Object.keys(person).forEach((key) => {\n  console.log(\\`\\${key} is \\${person[key]}\\`);\n});\n// using entries to get key and value both\nObject.entries(person).forEach(([key, value]) => {\n  console.log(\\`\\${key} is \\${value}\\`);\n});\n// expected output:\n// name is John\n// age is 20\n`)),mdx(\"p\",null,\"Both approaches above return the same result but Object.entries makes it easy to get key-value pair.\"),mdx(\"h1\",null,\"2. String replaceAll Method\"),mdx(\"p\",null,\"In JavaScript, to replace all occurrences of a string with another string, we need to use a Regular Expression like the following:\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const str = \"Red-Green-Blue\";\n// replaces the first occurrence only\nstr.replace(\"-\", \" \"); // Red Green-Blue\n// use RegEx to replace all occurrences\nstr.replace(/-/g, \" \"); // Red Green Blue\n`)),mdx(\"p\",null,\"But in ES12, a new method is added to \",mdx(\"inlineCode\",{parentName:\"p\"},\"String.prototype\"),\" named \",mdx(\"inlineCode\",{parentName:\"p\"},\"replaceAll\"),\" which replaces all occurrences of a string with another string value.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`str.replaceAll(\"-\", \" \"); // Red Green Blue\n`)),mdx(\"h1\",null,\"3. Numeric Separator\"),mdx(\"p\",null,\"You can use an underscore \",mdx(\"inlineCode\",{parentName:\"p\"},\"_\"),\" as a numeric separator, which makes it easy to count the number of zeros in a number.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`// difficult to read\nconst billion = 1000000000; // easier to read\nconst readableBillion = 1000_000_000;\nconsole.log(readableBillion); // returns 1000000000\n`)),mdx(\"p\",null,\"The underscore separator can also be used with BigInt numbers, like the following example:\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const trillion = 1000_000_000_000n;\nconsole.log(trillion); // 1000000000000\n`)),mdx(\"h1\",null,\"4. document.designMode\"),mdx(\"p\",null,\"Related to the frontend JavaScript, the design mode lets you edit any of the content on the page. Just open the browser console and type the following:\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`document.designMode = \"on\";\n`)),mdx(\"p\",null,\"Try yourself\"),mdx(\"p\",null,\"It is helpful for designers as they don\\u2019t have to change things in code every time to the change on the screen.\"),mdx(\"h1\",null,\"5. Logical Assignment Operator\"),mdx(\"p\",null,\"Logical assignment operators are a combination of logical operators \",mdx(\"inlineCode\",{parentName:\"p\"},\"&&\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"||\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"??\"),\" and assignment operator \",mdx(\"inlineCode\",{parentName:\"p\"},\"=\"),\".\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const a = 1;\nconst b = 2;\na &&= b;\nconsole.log(a); // returns 2\n// the above statement is equivalent to\na && (a = b); // OR another approach\nif (a) {\n  a = b;\n}\n`)),mdx(\"p\",null,\"We\\u2019re checking if the value of \",mdx(\"inlineCode\",{parentName:\"p\"},\"a\"),\" is truthy, if it is then we\\u2019re updating the value of \",mdx(\"inlineCode\",{parentName:\"p\"},\"a\"),\". The same can be done with logical OR \",mdx(\"inlineCode\",{parentName:\"p\"},\"||\"),\" operator.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const a = null;\nconst b = 3;\na ||= b;\nconsole.log(a); // returns 3\n// the above statement is equivalent to\na || (a = b);\n`)),mdx(\"p\",null,\"And with the Nullish Coalescing operator \",mdx(\"inlineCode\",{parentName:\"p\"},\"??\"),\".\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const a = null;\nconst b = 3;\na ??= b;\nconsole.log(a); // returns 3\n// the above statement is equivalent to\nif (a === null || a === undefined) {\n  a = b;\n}\n`)),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"??\"),\" operator only checks for \",mdx(\"inlineCode\",{parentName:\"p\"},\"null\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"undefined\"),\" values.\"),mdx(\"h1\",null,\"Conclusion\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\" Don\\u2019t forget to clap \\u{1F44F} in the comment section below if you learned something new\"))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"previousPost":{"slug":"20220219134441-javascript-memory-mistakes","frontmatter":{"title":"These Common JavaScript Mistakes Reduce Performance Drastically","date":"2022-02-19T13:44:41.800Z","tags":["#javascript","#optimization"],"description":"JavaScript doesn’t provide any memory management primitives. Instead, memory is managed by the JavaScript VM through a memory reclaim process. That process is known as Garbage Collection. Since we can’t force it to run, how do we know it will work properly? What do we know about it? Script execution is paused during the process. It frees memory for unreachable resources. It is non-deterministic. It will not inspect the whole memory in one go but will run in multiple cycles. It is unpredictable. It will execute when necessary.","cover_image":"20220219134441-javascript-memory-mistakes.png","readingTime":2},"content":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,o,n)=>o in e?c(e,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[o]=n,r=(e,o)=>{for(var n in o||(o={}))i.call(o,n)&&p(e,n,o[n]);if(a)for(var n of a(o))s.call(o,n)&&p(e,n,o[n]);return e},l=(e,o)=>m(e,d(o));var h=(e,o)=>{var n={};for(var t in e)i.call(e,t)&&o.indexOf(t)<0&&(n[t]=e[t]);if(e!=null&&a)for(var t of a(e))o.indexOf(t)<0&&s.call(e,t)&&(n[t]=e[t]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:e}=t,o=h(t,[\"components\"]);return mdx(MDXLayout,l(r(r({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"How can we prevent our web app from leaking memory? We have to avoid the retention of unnecessary resources. Let\\u2019s look at the most common scenarios where this might happen.\"),mdx(\"h1\",null,\"Timer Listeners\"),mdx(\"p\",null,\"Let\\u2019s look at the \",mdx(\"inlineCode\",{parentName:\"p\"},\"setInterval\"),\" timer. It is a commonly used Web API feature.\"),mdx(\"p\",null,\"The return of \",mdx(\"inlineCode\",{parentName:\"p\"},\"setInterval\"),\" is an interval ID which we can use to cancel the interval. We can call \",mdx(\"inlineCode\",{parentName:\"p\"},\"clearInterval\"),\" once the Component unmounts.\"),mdx(\"h1\",null,\"Event Listeners\"),mdx(\"p\",null,\"When using \",mdx(\"inlineCode\",{parentName:\"p\"},\"addEventListener\"),\", we need to use \",mdx(\"inlineCode\",{parentName:\"p\"},\"removeEventListener\"),\" to remove it.\"),mdx(\"h1\",null,\"Observers\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u201CThe Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document\\u2019s \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Viewport\"}),\"viewport\"),\".\\u201D \\u2014 \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\"}),\"MDN Web Docs\"))),mdx(\"p\",null,\"Once you are done observing the object, you need to cancel out the monitor process.\"),mdx(\"h1\",null,\"Holding DOM References\"),mdx(\"p\",null,\"DOM nodes are not free from memory leaks either. You need to be careful not to hold references of them.\"),mdx(\"h1\",null,\"Conclusion\"),mdx(\"p\",null,\"It is recommended to periodically run the browser profiler tools on your web application. That is the only way to be sure that nothing is leaking and left behind. The Chrome Developer \",mdx(\"inlineCode\",{parentName:\"p\"},\"performance\"),\" tab is the place to start detecting some anomalies. After you have spotted an issue, you can dig deeper into it with the \",mdx(\"inlineCode\",{parentName:\"p\"},\"profiler\"),\" tab by taking snapshots and comparing them.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\" Don\\u2019t forget to clap \\u{1F44F} in the comment section below if you learned something new\"))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"nextPost":null},"__N_SSG":true}