<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Development blog</title>
        <link>https://danfleser.com/</link>
        <description>undefined</description>
        <lastBuildDate>Tue, 15 Feb 2022 21:00:38 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en-US</language>
        <copyright>Copyright © 2022 Dan Fleser</copyright>
        <item>
            <title><![CDATA[Best Programming Jokes February 2022]]></title>
            <link>https://danfleser.com/posts/20220215200104-programmer-jokes-feb-2022</link>
            <guid>20220215200104-programmer-jokes-feb-2022</guid>
            <pubDate>Tue, 15 Feb 2022 20:01:04 GMT</pubDate>
            <description><![CDATA[In this post, we have collected a handful of jokes, that have been floating around the Web, which showcase a programmer’s sense of humor. Don’t worry if you don’t get all of them — just get a programmer to explain it to you.]]></description>
            <content:encoded><![CDATA[
# 0\. Idea of a Perfect Date

<img src="/images/20220215200104/1.jpeg" alt="Idea of a Perfect Date" />

# 1\. This website doesn’t use cookies

<img
  src="/images/20220215200104/2.jpeg"
  alt="This website doesn’t use cookies"
/>

# 2\. Behind the scenes

<img src="/images/20220215200104/3.jpeg" alt="Behind the scenes" />

# 3\. I don’t know what to do

<img src="/images/20220215200104/4.jpeg" alt="I don’t know what to do" />

# 4\. Finding a big problem while solving small ones

<img
  src="/images/20220215200104/5.jpeg"
  alt="Finding a big problem while solving small ones"
/>

# 5\. Maybe it doesn’t want to listen to me

<img
  src="/images/20220215200104/6.jpeg"
  alt="Maybe it doesn’t want to listen to me"
/>

# 6\. A serious crime

<img src="/images/20220215200104/7.jpeg" alt="A serious crime" />

# 7\. Oops! Something went wrong

<img src="/images/20220215200104/8.jpeg" alt="Oops! Something went wrong" />

# 8\. When you date a programmer

<img src="/images/20220215200104/9.jpeg" alt="When you date a programmer" />

# 9\. Blame Game

<img src="/images/20220215200104/10.jpeg" alt="Blame Game" />

# 10\. Every single time. Ctrl S Ctrl S

<img
  src="/images/20220215200104/11.jpeg"
  alt="Every single time. Ctrl S Ctrl S"
/>

# 11\. When you are serving notice period

<img
  src="/images/20220215200104/12.jpeg"
  alt="When you are serving notice period"
/>

# 12\. You gonna regret it later

<img src="/images/20220215200104/13.jpeg" alt="You gonna regret it later" />

# 13\. The ultimate excuse that works every time

<img
  src="/images/20220215200104/14.jpeg"
  alt="The ultimate excuse that works every time"
/>

# 14\. Strong security policy, seriously?

<img
  src="/images/20220215200104/15.jpeg"
  alt="Strong security policy, seriously?"
/>

# 15\. Hell for the developers

<img src="/images/20220215200104/16.jpeg" alt="Hell for the developers" />

# 16\. Oh No.

<img src="/images/20220215200104/17.jpeg" alt="Oh No." />

# 17\. What!?

<img src="/images/20220215200104/18.jpeg" alt="What!?" />

# 18\. Sending a Mail

<img src="/images/20220215200104/19.jpeg" alt="Sending a Mail" />

# 19\. An honest interview

<img src="/images/20220215200104/20.jpeg" alt="An honest interview" />

# 20\. Developer’s Life in a Nutshell

<img
  src="/images/20220215200104/21.jpeg"
  alt="Developer’s Life in a Nutshell"
/>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RabbitMQ vs Redis vs Kafka]]></title>
            <link>https://danfleser.com/posts/20220213171308-rabbitmq-redis-kafka</link>
            <guid>20220213171308-rabbitmq-redis-kafka</guid>
            <pubDate>Sun, 13 Feb 2022 17:13:08 GMT</pubDate>
            <description><![CDATA[When using asynchronous communication for Microservices, it is common to use a message broker. A broker ensures communication between different microservices is reliable and stable, that the messages are managed and monitored within the system and that messages don’t get lost.]]></description>
            <content:encoded><![CDATA[
# You should consider a few things:

- Broker Scale — The number of messages sent per second in the system.
- Data Persistency — The ability to recover messages.
- Consumer Capability — Whether the broker is capable of managing one-to-one and/or one-to-many consumers.

# RabbitMQ (AMQP)

- **Scale**: based on configuration and resources, the ballpark here is around 50K msg per second.
- **Persistency**: both persistent and transient messages are supported.
- **One-to-one** vs **one-to-many consumers**: both.

# Kafka

- **Scale**: can send up to a million messages per second.
- **Persistency**: yes.
- **One-to-one** vs **one-to-many consumers**: only one-to-many.

# Redis

- **Scale**: can send up to a million messages per second.
- **Persistency**: basically, no — it’s an in-memory datastore.
- **One-to-one** vs **one-to-many consumers**: both.

# Use Cases

- Short-lived Messages: Redis
- Large Amounts of Data: Kafka
- Complex Routing: RabbitMQ
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Learn React JS in 7 minutes — Beginners Tutorial]]></title>
            <link>https://danfleser.com/posts/20220213165126-learn-react-in-5-min</link>
            <guid>20220213165126-learn-react-in-5-min</guid>
            <pubDate>Sun, 13 Feb 2022 16:51:26 GMT</pubDate>
            <description><![CDATA[After reading this article, you should be able to start coding React apps given that you’re comfortable with Javascript.]]></description>
            <content:encoded><![CDATA[
## Get you started with the popular JavaScript library in just a few minutes.

When getting started with React, you should use the simplest setup possible: an HTML file which imports the `React` and the `ReactDOM` libraries using script tags.

It looks like this:

```jsx
<html>
  <head>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">REACT_CODE</script>
  </body>
</html>
```

We’ve also imported Babel, as React uses something called JSX to write markup. We’ll need to transform the JSX into plain JavaScript, so that the browser can understand it.

There are more two things I want you to notice:

1.  The `<div>` with the id of `#root`. This is the entry point for our app. This is where our entire app will live.
2.  The `<script type="text/babel">` tag in the body. This is where we’ll write our React code.

# Components

Everything in React is a component, and these usually take the form of JavaScript classes. You create a component by extending upon the `React-Component` class. Let’s create a component called `Hello`:

```jsx
class Hello extends React.Component {
  render() {
    return <h1>Hello world!</h1>;
  }
}
```

You then define the methods for the component. In our example, we only have one method, and it’s called `render()`.

Inside `render()` you’ll return a description of what you want React to draw on the page. In the case above, we simply want it to display an `h1` tag with the text _Hello world!_ inside it.

To get our tiny application to render on the screen, we also have to use `ReactDOM.render()`:

```jsx
ReactDOM.render(<Hello />, document.getElementById("root"));
```

So this is where we connect our `Hello` component with the entry point for the app (`<div id="root"></div>`).

> _So we’re simply saying:_ Hey React! Please render the **Hello** component inside the DOM node with an id of **root**!

# Handling data

There are two types of data in React: **props** and **state**. The difference between the two is a bit tricky to understand in the beginning, so don’t worry if you find it a bit confusing. It’ll become easier once you start working with them.

The key difference is that the **state** is private and can be changed from within the component itself. **Props** are external, and not controlled by the component itself. It’s passed down from components higher up the hierarchy, who also control the data.

**A component can change its internal state directly. It can not change its props directly.**

Let’s take a closer look at props first.

# Props

Our `Hello` component is completely static. It renders out the same message no matter what. However, a big part of React is reusability, meaning the ability to write a component once, and then reuse it in different use cases. For example to display different messages.

To achieve this type of reusability, we’ll add props. This is how you pass props to a component:

```jsx
ReactDOM.render(
    <Hello **message="my friend"** />,
    document.getElementById("root")
);
```

This prop is called `message` and has the value “my friend”. We can access this prop inside the Hello component by referencing `this.props.message`, like this:

```jsx
class Hello extends React.Component {
    render() {
        return <h1>Hello {**this.props.message**}!</h1>;
    }
}
```

The reason we’re writing `{this.props.message}` with curly braces is because we need to tell the JSX that we want to add a JavaScript expression. This is called **escaping**_._

However, what if we want the component to be able to change its own data? Then we have to use state instead!

# State

Unlike props — which can’t be changed directly by the component — the state can.

So if you want the data in your app to change — for example based on user interactions — it must be stored in a component’s state somewhere in the app.

## Initializing state

To initialize the state, simply set `this.state` in the `constructor()` method of the class. Our state is an object which in our case only has one key called `message`.

```jsx
class Hello extends React.Component {
  constructor() {
    super();
    this.state = {
      message: "my friend (from state)!",
    };
  }

  render() {
    return <h1>Hello {this.state.message}!</h1>;
  }
}
```

Before we set the state, we have to call `super()` in the constructor. This is because `this` is uninitialized before `super()` has been called.

## Changing the state

To modify the state, simply call **this.setState(),** passing in the new state object as the argument. We’ll do this inside a method which we’ll call `updateMessage`.

```jsx
class Hello extends React.Component {

    constructor(){
        super();
        this.state = {
            message: "my friend (from state)!"
        };
        **this.updateMessage = this.updateMessage.bind(this);**   }    **updateMessage() {
        this.setState({
            message: "my friend (from changed state)!"
        });
    }**    render() {
        return <h1>Hello {this.state.message}!</h1>;
    }

}
```

> Note: To make this work, we also had to bind the `this` keyword to the `updateMessage` method. Otherwise we couldn’t have accessed `this` in the method.

# Event Handlers

The next step is to create a button to click on, so that we can trigger the `updateMessage()` method.

So let’s add a button to the `render()` method:

```jsx
render() {
    return (

    <div>
        <h1>Hello {this.state.message}!</h1>
        <button onClick={this.updateMessage}>Click me!</button>
    </div>
    )
}
```

Here, we’re hooking an event listener onto the button, listening for the **onClick** event. When this is triggered, we call the **updateMessage** method.

Here’s the entire component:

```jsx
class Hello extends React.Component {
  constructor() {
    super();
    this.state = {
      message: "my friend (from state)!",
    };
    this.updateMessage = this.updateMessage.bind(this);
  }

  updateMessage() {
    this.setState({
      message: "my friend (from changed state)!",
    });
  }

  render() {
    return (
      <div>
        <h1>Hello {this.state.message}!</h1>
        <button onClick={this.updateMessage}>Click me!</button>
      </div>
    );
  }
}
```

The **updateMessage** method then calls **this.setState()** which changes the `this.state.message` value.

Congrats! You now have a very basic understanding of the most important concepts in React.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[7 Income Ideas For Programmers(That Actually Work)]]></title>
            <link>https://danfleser.com/posts/20220213130620-programmers-side-gigs</link>
            <guid>20220213130620-programmers-side-gigs</guid>
            <pubDate>Sun, 13 Feb 2022 13:06:20 GMT</pubDate>
            <description><![CDATA[Earning $1,000 to $100,000 per month as a programmer, but requires effort, time, and maybe money to turn active to passive income.]]></description>
            <content:encoded><![CDATA[
> “If you want to succeed, double your failure rate.”

# 1\. Freelancing

A strategy would be to work on your LinkedIn profile, contact recruiters and past clients from your network, go to conferences and meetups, and look out for platforms that match up remote workers with companies.

<img
  src="/images/20220213130620-work-from-home.png"
  alt="freelancing work from home"
/>

Take advantage of and leverage Facebook groups. There are dozens of Facebook groups that are designed specifically for freelancers.

- [Jobs for Front-End Developers](https://www.facebook.com/groups/556739801135588/)
- [Remote and Travel Jobs](https://www.facebook.com/groups/RemoteTravelJobs/)
- [Remote Jobs, Work Anywhere — Inventive Hub](https://www.facebook.com/groups/inventivehub/)
- [Guavabean Freelancer Group](https://www.facebook.com/groups/guavabean/)

There is no shortage of Facebook groups you can join and explore. Go ahead type “remote jobs” or “programming jobs” — or be creative about your search terms. You’ll be surprised at how many groups there are.

# 2\. Bounty Programs

Hunting for bugs, or what’s called _bug bounty hunting_, is the process of being paid to find vulnerabilities in software, websites, and web applications.

<img
  src="/images/20220213130620-bounty-hunt.png"
  alt="bug bounty hunting program"
/>

Some programmers make tens of thousands of dollars a year on side-hustling via bounty programs.

- [Google's Bug Hunting](https://bughunters.google.com/)
- [Facebook Bug Bounty Program](https://www.facebook.com/whitehat/hackerplus)
- [Fire Bounty](https://firebounty.com/)
- [Bugcrowd](https://www.bugcrowd.com/bug-bounty-list/)
- [Vulnerability Lab](https://www.vulnerability-lab.com/list-of-bug-bounty-programs.php)
- [HackerOne](https://hackerone.com/hacktivity?sort_type=popular&filter=type%3Aall&page=1&range=forever)

# 3\. Coding Contests

Below is a list in no particular order of websites you can start looking into to practice and participate in coding contests with monetary rewards. This way of making money online is not for everyone, and there is no guarantee you’ll win.

<img
  src="/images/20220213130620-coding-contest.png"
  alt="coding contests with monetary rewards"
/>

I would also recommend looking into hackathons that require you to build an application based on ideas. These tend to be less stressful compared to the algorithm-based, problem-solving coding contests. Project-based hackathons are always fun when done with friends as the experience is more engaging.

- [HackerEarth](https://www.hackerearth.com/)
- [Google Code Jam](https://codingcompetitions.withgoogle.com/codejam)
- [HackerRank](https://www.hackerrank.com/)
- [Topcoder](https://www.topcoder.com/)
- [Coderbyte](https://coderbyte.com/)
- [InterviewBit](https://www.interviewbit.com/)
- [Codeforces](https://codeforces.com/)
- [Sphere Online Judge](https://www.spoj.com/)
- [CodingBat](http://codingbat.com/java)
- [Codility](https://www.codility.com/)
- [Project Euler](https://projecteuler.net/)
- [CodeChef](https://www.codechef.com/)

# 4\. Become an Online Instructor

- Create a course, upload it to a marketplace, sit back and let the marketplace do all the marketing (the hands-free way).
- Create a course, host it yourself on a content management platform, and market it yourself.
- Conduct teaching sessions that foster face-to-face interactions with students. These could be one-on-one or in a group setting.

<img
  src="/images/20220213130620-youtube-content-creator.png"
  alt="digital content creator"
/>

The instructor business can be something that might take up a lot of your time initially. The process of creating courses, editing your content, and preparing lecture material and homework exercises can be quite a bit of a time investment. It could take you anywhere from one to three months' worth of work.

While course creation is great, something to keep in mind is that you have to pay your taxes.

<img src="/images/20220213130620-irs-meme.jpg" alt="pay your taxes IRS meme" />

Below are platforms you can start to look into to sell or teach online to generate some semi-passive revenue. Take note that most of these are open to everyone regardless of which country you come from. There's always PayPal and Payoneer to help facilitate your transferring your profits.

Available for everyone:

- [YouTube](http://www.youtube.com/) for publishing your own video coding tutorials. Revenue is generated through an ads program.
- [Udemy](https://mikkegoes.com/udemy) for creating and publishing your own online coding courses. The profit-sharing is high at 50% but Udemy brings to the table millions of students and an audience you can directly tap into when you hit the Publish button.
- [Skillshare](https://www.skillshare.com/teach) is also an alternative to Udemy.
- [Udacity](https://www.udacity.com/start-mentoring) is another alternative to Udemy.
- [BitDegree](https://www.bitdegree.org/) is a Udemy alternative for creating and publishing your own online coding courses.
- [Amazon Kindle Direct Publishing](https://kdp.amazon.com/) for creating and selling your own books
- Host courses on your own website

High end of the spectrum, invite based:

- [Frontend Masters](https://frontendmasters.com/)
- [LinkedIn Learning](https://www.linkedin.com/learning/?trk=lynda_redirect_learning)
- [Pluralsight](https://www.pluralsight.com/)

They are by invite only, but worth the time investment to get into as they have a large audience and some of the best instructors you can get to learn from.

Making consistent high-quality content is what will set you apart from the rest of the pack. Competition is high, and part of the game is marketing. The best instructors constantly update their courses to stay relevant and at the top of their game. The beauty of creating courses is that once you build traction, it’s an endless stream of passive income.

# 5\. YouTube Channel

YouTube still has massive potential for you as a programmer to make some pretty decent passive income through the YouTube Partner Program.

<img
  src="/images/20220213130620-youtube-content.png"
  alt="YouTube Channel massive potential"
/>

The barrier to entry is a bit high if you're trying to join the partner program, though. It requires that your channel have an aggregate total of 4,000 watched hours of video over 12 months and at least 1,000 subscribers, which is no small feat when you’re getting started and you’re a nobody.

There are alternative ways of generating value from your channel, even if they’re small, like blogging or article creation. You need to leverage this platform as a lead and audience generator.

To make some money, you need to build social proof, this requires you to provide valuable content for your YouTube channel.

# 6\. Build an App You Can Sell

Make your own piece of software in order to sell it. It’s no easy feat, but can be incredibly rewarding. One of the things we programmers suck at is understanding how to market our craft.

<img
  src="/images/20220213130620-build-app.png"
  alt="startup Build an App You Can Sell"
/>

You need to come up with a business plan and strategy of how to monetize your application.

Build a software product that the market needs or that helps other people solve their problems.The first steps are to find a problem and solve it with software. This can be as simple as walking down to your local store and having a conversation with the owners to see what pressing issues they’re struggling with, and then providing a solution.

# 7\. Make a Plugin or Theme for WordPress

The market may seem oversaturated, but think for a moment about the number of plugins or apps that haven't been built yet on WordPress. Or the number of restaurants and businesses opening up around your neighborhood that still do not have an online presence. To get started making money with your plugins, you can start posting to various online marketplaces, such as:

- WordPress.org
- Themeforest
- CodeCanyon
- TemplateMonster Marketplace
- Mojo Marketplace
- ThemeSnap
- Creative Market
- Codester

<img
  src="/images/20220213130620-plugin-blocks.png"
  alt="Make a Plugin or Theme for WordPress"
/>

You can choose to make your plugins and themes premium. Or you can charge perusers, use ad-driven monetization, or accept donations through Patreon. You can also give your plugins and themes away free, to build social proof. Like all things, if no one knows who you are, sometimes it’s good to showcase a few freebies.

# Conclusion

There is no such thing as fast money.

Please feel free to drop me a line in the comments below! I’d like to hear how your journey is going.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[8 Things You Should Do Before 8 A.M.]]></title>
            <link>https://danfleser.com/posts/20220212223056-things-you-should-do-before-8-am</link>
            <guid>20220212223056-things-you-should-do-before-8-am</guid>
            <pubDate>Sat, 12 Feb 2022 22:30:56 GMT</pubDate>
            <description><![CDATA[If you don't purposefully carve out time every day to progress and improve, without question, your time will get lost in the vacuum of our increasingly crowded lives. Before you know it, you'll be old and withered, wondering where all that time went.]]></description>
            <content:encoded><![CDATA[
Life is busy. If you don’t purposefully carve time out every day to progress and improve.

- You are the designer of your destiny.
- You are responsible.
- You get to decide. You _must_ decide — because if you don’t, someone else will. Indecision is a bad decision.
- Remember. The goal needs to be long-term sustainability.

With this short morning routine, your life will quickly change.

- Wake up
- Get in the zone
- Get moving
- Put the right food in your body
- Get ready
- Get inspired
- Get perspective
- Do something to move you forward

# 1\. Get A Healthy 7+ Hours of Sleep

Let’s face it — Sleep is just as important as eating and drinking water. Despite this, millions of people do not sleep enough and experience insane problems as a result.

<img src="/images/20220212223056-sleep.png" alt="Healthy Sleep in bed" />

Getting a healthy amount of sleep is linked to:

- Increased memory
- Longer life
- Decreased inflammation
- Increased creativity
- Increased attention and focus
- Decreased fat and increased muscle mass with exercise
- Lower stress
- Decreased dependence on stimulants like caffeine
- Decreased risk of getting into accidents
- Decreased risk of depression
- And tons more… google it.

# 2\. Meditation Facilitate Clarity and Abundance

Meditation facilitate intense gratitude for all that you have. Gratitude is having an abundance mindset. When you think abundantly, the world is your oyster. There is limitless opportunity and possibility for you.

<img
  src="/images/20220212223056-meditate.png"
  alt="Meditation Facilitate Clarity and Abundance"
/>

What you think you become. People are magnets. When you’re grateful for what you have, you will attract more of the positive and good. Gratitude is contagious.

# 3\. Hard Physical Activity

Whatever your preference, get your body moving.

If you want to be among the healthy, happy, and productive people in the world, get in the habit of regular exercise. Many people go immediately to the gym to get their body moving. I have lately found that doing yard work in the wee hours of the morning generates an intense inflow of inspiration and clarity.

<img
  src="/images/20220212223056-focus.png"
  alt="Hard Physical Activity focus"
/>

Exercise has been found to decrease your chance of depression, anxiety, and stress. It is also related to higher success in your career.

# 4\. Take A Cold Shower

Cold water immersion radically facilitates physical and mental wellness. When practiced regularly, it provides long-lasting changes to your body’s immune, lymphatic, circulatory and digestive systems that improve the quality of your life. It can also increase weight-loss because it boosts your metabolism.

<img src="/images/20220212223056-shower.jpg" alt="Take A Cold Shower" />

# 5\. Listen to/Read Uplifting Content

It is common for the world’s most successful people to read at least one book per week. They are constantly learning.

<img src="/images/20220212223056-read.png" alt="Read books" />

Over a long enough period of time you’ll think and see the world differently. You’ll be able to make more connections between different topics.

# 6\. Review Your Life Vision

Your goals should be written down — short term and long term. Taking just a few minutes to read your life vision puts your day into perspective.

<img src="/images/20220212223056-plan.png" alt="write your goals" />

If you read your long term goals every day you will think about them every day. If you think about them every day, and spend your days working toward them, they’ll manifest.

Achieving goals is a science. There’s no confusion or ambiguity to it. If you follow a simple pattern, you can accomplish all of your goals, no matter how big they are.

A fundamental aspect of that is writing them down and reviewing them every single day.

# 8\. Eat that Frog! Do At Least One Thing Towards Long-Term Goals

_The worst comes first._ You need to do the hard stuff first thing in the morning.

<img
  src="/images/20220212223056-eat-the-frog-work.png"
  alt="Eat that Frog. the worst comes first"
/>

If you take just one step toward you big goals every day, you’ll realize those goals weren’t really far away.

# Conclusion

After you’ve done this, no matter what you have for the rest of your day, you’ll have done the important stuff first. You’ll have put yourself in a place to succeed.

<img src="/images/20220212223056-checklist.png" alt="life to do list" />

Because you’ll have done all these things, you’ll show up better in life. You’ll be better at your job. You’ll be better in your relationships. You’ll be happier. You’ll be more confident. You’ll be more bold and daring. You’ll have more clarity and vision.

Your life will shortly change.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[5 Websites To Take Your Front End Skills From ZERO To HERO]]></title>
            <link>https://danfleser.com/posts/20220212221019-frontend-end-skills-x100</link>
            <guid>20220212221019-frontend-end-skills-x100</guid>
            <pubDate>Sat, 12 Feb 2022 22:10:19 GMT</pubDate>
            <description><![CDATA[Learning how to code is best accomplished by solving real-world problems and taking part in real-world projects. Despite the importance of theoretical knowledge, you do not have much chance of progressing without the ability to use it.]]></description>
            <content:encoded><![CDATA[
# 1\. [Daily UI](https://www.dailyui.co/)

Every challenge is delivered to your mail and you can complete your challenges anytime as you may want.

<img
  src="/images/20220212221019-daily-ui-challenge.png"
  alt="greatest collections of designs ui&ux"
/>

# 2\. [100DaysCSS Challenge](hhttps://100dayscss.com/about/)

Focused to drill down on your CSS skills. You will rise up to be a CSS Guru after taking up this challenge.

_#100DaysChallenge_ is a very popular tag on Twitter. You can document your journey there and gain a lot along with the community there.

<img
  src="/images/20220212221019-100-days-css.png"
  alt="100 DAYS CSS CHALLENGE"
/>

# 3\. [Dribble](http://dribbble.com)

Features one of the greatest collections of designs over the internet. You can leverage these already built designs to code their clones.

<img
  src="/images/20220212221019-dribble.png"
  alt="greatest collections of designs ui&ux"
/>

In _dribble_, you can pick any design you may want to code and start making it.

# 4\. [CodePen Challenges](http://codepen.io)

_Codepen_ also offers a lot of [challenges](https://codepen.io/challenges/) that help you to level up your skills by building things. They have a monthly theme and each week you will be prompted with a new challenge.

<img
  src="/images/20220212221019-codepen.png"
  alt="codepen challenge collection"
/>

There is a huge number of participants and a majority of them share their codepen with others. So, you’ll never feel like you are doing it alone. The community is there to lift you up.

# 5\. [Frontend Mentor](https://www.frontendmentor.io/challenges)

Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 303,212 developers building projects, reviewing code, and helping each other get better.

<img
  src="/images/20220212221019-frontend-mentor-challenge.png"
  alt="HTML, CSS and JavaScript challenge"
/>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[7 Tricks To Master the Art of Googling]]></title>
            <link>https://danfleser.com/posts/20220212095550-master-the-art-of-googling</link>
            <guid>20220212095550-master-the-art-of-googling</guid>
            <pubDate>Sat, 12 Feb 2022 09:55:50 GMT</pubDate>
            <description><![CDATA[Great developers are great at googling. If you've heard it, you've heard right. Googling is a must-know skill for developers. It can help you effectively search for a solution to a problem or an error. If you want to find the right answer to a problem, you need to know how to ask the right question. This lifelong key skill can save a lot of your time and effort.]]></description>
            <content:encoded><![CDATA[
# 1\. Use Quotes To Match Exact Phrases

<img src="/images/20220212095550-query.png" alt="Searching for exact phrases" />

# 2\. Use keyword1 AND/OR keyword2

<img
  src="/images/20220212095550-and.png"
  alt="Searching with the AND operator"
/>

<img src="/images/20220212095550-or.png" alt="Searching with the OR operator" />

# 3\. Exclude Certain Terms Using the Minus Sign

<img
  src="/images/20220212095550-minus.png"
  alt="Search excluding words to reduce the context to your query"
/>

# 4\. Use Wild Cards in Your Search Term

When you use an asterisk (\*) in the search terms, this acts as a placeholder that Google automatically fills before delivering the results.

<img
  src="/images/20220212095550-wild-card.png"
  alt="Searching using wild cards"
/>

# 5\. Find Websites Similar to Another Website

<img
  src="/images/20220212095550-related.png"
  alt="Searching for related sites"
/>

# 6\. Search a Website Using Google

Did you know that you can search inside a website using Google? With this feature, you can find articles, blog posts, and pages published on a particular site — especially when it doesn’t have a built-in search feature available.

<img
  src="/images/20220212095550-search-website.png"
  alt="Searching within a site"
/>

# 7\. Gradually Increase the Words in Your Search Term

Google recommends that you start a search with only the basic search terms. For example, if you are trying to find courses for learning Javascript, start with the most basic phrase and gradually increase the number of words in your search term until you find what you are looking for:

- JavaScript courses
- JavaScript courses for beginners
- JavaScript courses for beginners Youtube

Following this searching strategy has a few benefits. Using a broader search term first gives you the chance to see the big picture of the topic and the different avenues available to take. It also ensures that you don’t miss any important information by going straight to a refined, focused search term. As you add more words to the search term, you get to see results that are more targeted to your specific needs.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[5 CSS Practices To Avoid as a Web Developer]]></title>
            <link>https://danfleser.com/posts/20220212092333-avoid-css-practices</link>
            <guid>20220212092333-avoid-css-practices</guid>
            <pubDate>Sat, 12 Feb 2022 09:23:33 GMT</pubDate>
            <description><![CDATA[Some people think that CSS is difficult to learn. There are lots of crutches and even some magic, which makes it easy to shoot yourself in the foot. I feel sad about this since I don’t think so.]]></description>
            <content:encoded><![CDATA[
## 1\. Using the Same Rule Repetitively

A lot of beginners use repetitive rules for each element. If you want to create a rule for multiple elements, use a class attribute instead.

<img
  src="/images/20220212092333-gta-rewrite-css-meme.png"
  alt="rewrite css meme GTA ah shit here we go again"
/>

Do not do this:

```css
#intro1 {
  color: #3498db;
  font-size: 10px;
  font-weight: bold;
}

header {
  color: #3498db;
  font-size: 20px;
  background-color: green;
}

#banner {
  color: #3498db;
  font-size: 30px;
  background-image: url(images/static.jpg);
}
```

You can use:

```css
.blue {
  color: #3498db;
}
```

## 2\. Shoving everything into one CSS file

Having a 3500 line CSS file is NOT the way to go. Even if you minify at a later date. You should start separating them into the 'views' or 'components' when you are working on a bigger project.

## 3\. Naming your CSS selectors unnecessarily descriptive

'.sqaured-yellow-border-card' when '.card' will be suffice

## 4\. !important this, !important that, !important !important

People who know how to write CSS never use these.

<img
  src="/images/20220212092333-important-css.jpg"
  alt="css important meme bad practice"
/>

## 5\. Set Margins or Padding and Then Reset Them

I often see people set margins or padding for all elements and then reset them for the first or last element. I don’t know why they use two rules when you can get by with one. It’s much easier to set margins and padding for all the required elements at once.

<img
  src="/images/20220212092333-box-model-css.jpg"
  alt="css box model margin padding meme"
/>

Use one of the following for simpler and more concise CSS: `nth-child`/`nth-of-type` selectors, the `:not()` pseudo-class, or the adjacent sibling combinator better known as `+`.

Do not do this:

```css
.item {
  margin-right: 1.6rem;
}

.item:last-child {
  margin-right: 0;
}
```

You can use:

```css
.item:not(:last-child) {
  margin-right: 1.6rem;
}
```

Or

```css
.item:nth-child(n + 2) {
  margin-left: 1.6rem;
}
```

Or

```css
.item + .item {
  margin-left: 1.6rem;
}
```
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[7 Alternatives to the <div> HTML Tag]]></title>
            <link>https://danfleser.com/posts/20220212071527-div-tag</link>
            <guid>20220212071527-div-tag</guid>
            <pubDate>Sat, 12 Feb 2022 07:15:27 GMT</pubDate>
            <description><![CDATA[In the early stages of learning how to structure an HTML document, it’s not uncommon to end up with what some developers call “div soup.” Need a content section your homepage? Wrap in a div! Building a sidebar? Div it up! Three column layout? Div, div, div!]]></description>
            <content:encoded><![CDATA[
Does your HTML markup look like this 👆?

So you've made a delicious [div soup](https://www.pluralsight.com/blog/software-development/html5-web-components-overview)?, no problem. I'm here to help.

Writing [Semantic HTML](https://www.lifewire.com/why-use-semantic-html-3468271) gives your markup meaning to web browsers and screen readers and helps with SEO which brings your website on top of search engine results.

> “The `div` element has no special meaning at all…Authors are strongly encouraged to view the `div` element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the `div` element leads to better accessibility for readers and easier maintainability for authors.”

# The `Main` Element

The [main](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main) element indicates to browsers and screen readers which portion of your markup contains the main section of content on a given page. This can help with keyboard command access, zooming on mobile browsers, and more. It should be used only once per page.

```html
<main>
  <h1>Most Popular Browsers</h1>
  <p>Chrome, Firefox, and Edge are the most used browsers today.</p>

  <article>
    <h2>Google Chrome</h2>
    <p>
      Google Chrome is a web browser developed by Google, released in 2008.
      Chrome is the world's most popular web browser today!
    </p>
  </article>

  <article>
    <h2>Mozilla Firefox</h2>
    <p>
      Mozilla Firefox is an open-source web browser developed by Mozilla.
      Firefox has been the second most popular web browser since January, 2018.
    </p>
  </article>

  <article>
    <h2>Microsoft Edge</h2>
    <p>
      Microsoft Edge is a web browser developed by Microsoft, released in 2015.
      Microsoft Edge replaced Internet Explorer.
    </p>
  </article>
</main>
```

# The `Section` Element

The [section](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section) element is used to group content by theme and represents a section of a document or application. Sections can have their own `header` and `footer` elements, and there can be multiple `section` elements used on a single page.

```html
<section>
  <h2>WWF History</h2>
  <p>
    The World Wide Fund for Nature (WWF) is an international organization
    working on issues regarding the conservation, research and restoration of
    the environment, formerly named the World Wildlife Fund. WWF was founded in
    1961.
  </p>
</section>

<section>
  <h2>WWF's Symbol</h2>
  <p>
    The Panda has become the symbol of WWF. The well-known panda logo of WWF
    originated from a panda named Chi Chi that was transferred from the Beijing
    Zoo to the London Zoo in the same year of the establishment of WWF.
  </p>
</section>
```

# The `Aside` Element

The [aside](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside) elements are mainly used to represent part of a page containing related content to a given section. Asides are typically used as sidebars.

```html
<p>
  My family and I visited The Epcot center this summer. The weather was nice,
  and Epcot was amazing! I had a great summer together with my family!
</p>

<aside>
  <h4>Epcot Center</h4>
  <p>
    Epcot is a theme park at Walt Disney World Resort featuring exciting
    attractions, international pavilions, award-winning fireworks and seasonal
    special events.
  </p>
</aside>
```

# The `Article` Element

The [article](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article) element can be used for portions of content that could stand on their own. Blog posts, newspaper articles, and user comments are some possible use cases the the `article` element.

```html
<article>
  <h2>Google Chrome</h2>
  <p>
    Google Chrome is a web browser developed by Google, released in 2008. Chrome
    is the world's most popular web browser today!
  </p>
</article>

<article>
  <h2>Mozilla Firefox</h2>
  <p>
    Mozilla Firefox is an open-source web browser developed by Mozilla. Firefox
    has been the second most popular web browser since January, 2018.
  </p>
</article>

<article>
  <h2>Microsoft Edge</h2>
  <p>
    Microsoft Edge is a web browser developed by Microsoft, released in 2015.
    Microsoft Edge replaced Internet Explorer.
  </p>
</article>
```

# The `Blockquote` Element

The [blockquote](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote) element represents content that is being quoted from an external source (a person, document, newspaper, case study, etc.). It is often accompanied by the `cite` element to attribute the quote to its source.

```html
<blockquote cite="http://www.worldwildlife.org/who/index.html">
  For 50 years, WWF has been protecting the future of nature. The world's
  leading conservation organization, WWF works in 100 countries and is supported
  by 1.2 million members in the United States and close to 5 million globally.
</blockquote>
```

# The `Nav` Element

The [nav](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav) elements represent the navigation section of a document. The `nav` element should include the primary navigation links for a give page, application, etc.

```html
<nav>
  <a href="/html/">HTML</a> | <a href="/css/">CSS</a> |
  <a href="/js/">JavaScript</a> |
  <a href="/python/">Python</a>
</nav>
```

# The `Header` Element

The [header](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header) element represents the “header” section of a document or section. In many websites, the `header` element will contain introductory content but also a logo, a search form, an author name.

```html
<header>
  <h1>A heading here</h1>
  <p>Posted by John Doe</p>
  <p>Some additional information here</p>
</header>
```

# The `Footer` Element

The [footer](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer) element represents the “footer” section of a document or section. In many websites, the `footer` element will contain contact and copyright information, a brief “about” blurb, social media logos and links, etc.

```html
<header>
  <p>Author: Hege Refsnes</p>
  <p><a href="mailto:hege@example.com">hege@example.com</a></p>
</header>
```

Now that we know about some semantically optimized alternatives to the `div` element, how do we know when to use each of them? And when (if ever) is it ok to still use `div` elements in our markup? [HTML5 Doctor](http://html5doctor.com) has a really handy flowchart to help answer that question:

<img
  src="/images/20220212071527-div-tag-diagram.png"
  alt="Adding console logs to render expressions"
/>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Top Websites for Web Developers]]></title>
            <link>https://danfleser.com/posts/20220212064149-web-dev-websites</link>
            <guid>20220212064149-web-dev-websites</guid>
            <pubDate>Sat, 12 Feb 2022 06:41:49 GMT</pubDate>
            <description><![CDATA[Web development is a specific field that requires excellent knowledge of coding, UX, web design, and many more skills. Online resources make a significant investment in time when you need to get the latest info on new trends and standards, coding languages, and best practices.]]></description>
            <content:encoded><![CDATA[
## 1\. Random Image via API

[Link](https://source.unsplash.com)

The most powerful photo engine in the world. The Unsplash API is a modern JSON API that surfaces all of the info you’ll need to build any experience for your users

## 2\. Carbon

[Link](http://carbon.now.sh)

Create and share beautiful images of your source code. Start typing or drop a file into the text area to get started.

## 3\. Peppertype

[Link](https://peppertype.ai)

Generate better content copies in seconds with the power of Artificial Intelligence. Expanding your content for writing blogs is easier than ever before. Get AI-Generated tweet ideas in seconds.

## 4\. Poet. so

[Link](http://poet.so)

Capture and share Twitter posts as beautiful images. You could use this as social proof on your website.

## 5\. Small Dev tools

[Link](https://smalldev.tools)

Handy developer tools with a delightful interface. Provide 20+ tools that help developers with commonly performed tasks like Encoding/Decoding, Minifying, Test Dummy data set, and a lot more.

## 6\. Show beautiful message in the console

[Link](http://npmjs.com/package/figlet)

FIGlet is a program for making large letters out of ordinary text.

## 7\. A Visual Type Scale

[Link](http://type-scale.com)

Understand and visualize the difference between different font sizes, REM vs. EM Values. Check the preview in real-time to see how it looks

## 8\. Remove Background from Image

[Link](https://remove.bg)

Remove backgrounds 100% automatically in 5 seconds with zero clicks.

## 9\. Responsively

[Link](https://responsively.app)

Develop responsive web apps 5x faster!

## 10\. Metatags

[Link](http://metatags.io)

Meta Tags is a tool to debug and generate meta tag codes for any website. Tags you can edit and experiment with your content then preview how your webpage will look on Google, Facebook, Twitter, and more!

## 11\. ReadMe

[Link](https://readme.so)
The easiest way to create a README file in minutes visually

## 12\. unDraw

[Link](https://undraw.co/illustrations)

High-class illustrations for web and mobile projects. Make your project eye-catching with awesome characters. Use it both for commercial and personal purposes.

## 13\. Profile Pic Maker

[Link](https://pfpmaker.com)

Make an awesome profile picture from any photo

## 14\. SigmaOS

[Link](http://sigmaos.com)

Fly through your work. The browser that makes you faster and better at working on the web.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Best Practices for REST APIs Architecture]]></title>
            <link>https://danfleser.com/posts/20220212062358-api-architecture</link>
            <guid>20220212062358-api-architecture</guid>
            <pubDate>Sat, 12 Feb 2022 06:23:58 GMT</pubDate>
            <content:encoded><![CDATA[
# 1\. Learn the basics of [HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview)

- HTTP has **verbs** (actions or methods): GET, POST, PUT, PATCH and DELETE are most common.
- REST is **resource-oriented** and a resource is represented by an **URI**: `/library/`
- An **endpoint** is the combination of a verb and an URI, example: `GET: /books/`
- An endpoint can be interpreted as an _action performed on a resource_**_._** Example: `POST: /books/` may mean "Create a new book".
- At a high-level, **verbs map to CRUD operations**: `GET` means `Read`, `POST` means `Create`, `PUT` and `PATCH` mean `Update`, and `DELETE` means `Delete`
- A response’s status is specified by its **status code**: `1xx` for **information**, `2xx` for **success**, `3xx` for **redirection**, `4xx` for **client errors** and `5xx` for **server errors**

# 2\. Do not return plain text

Most REST APIs by convention use JSON as the data format.

You should still **specify the** `**Content-Type: application/json**` **header.**

# 3\. Do not use verbs in URIs

\# Don’t do this
GET: /books/:slug/getBook/
\# Do this
GET: /books/:slug

\# Don’t do this
POST: /books/createNewBook/
\# Do this
POST: /books/

This is because the **HTTP verbs should be sufficient to accurately describe the action being performed on the resource**.

# 4\. Use plural nouns for resources

**My personal advice is to _use the plural form_.**

GET: /books/2/
POST: /books/
...

# 5\. Return the error details in the response body

When an API server handles an error, it is convenient (\*and recommended\*) to return **error details** within the JSON body to **help consumers with debugging**. Even better if you include which fields were affected by the error!

{
"error": "Invalid payload.",
"detail": {
"name": "This field is required."
}
}

# 6\. Pay special attention to HTTP status codes

> _The worst thing your API could do is_ return an error response _with a_ `_200 OK_` _status code._

**Make use of the HTTP status code, and use the response body to provide error details**.

HTTP/1.1 400 Bad Request
Content-Type: application/json{
"error": "Expected at least three items in the list."
}

# 7\. You should use HTTP status codes consistently

GET: 200 OK
PUT: 200 OK
POST: 201 Created
PATCH: 200 OK
DELETE: 204 No Content


# 8\. Make use of the querystring for filtering and pagination

Your consumers may want to retrieve items that fulfill a specific condition, or retrieve them in small amounts at a time to improve performance.

With **filtering**, consumers can specify parameters (or properties) that the returned items should have.

**Pagination** allows consumers to retrieve _fractions of the set of data_. The simplest kind of pagination is **page number pagination**, which is determined by a `page` and a `page_size`.

GET: /books?page=1&page_size=10

\# Don’t do this
GET: /books/published/
\# Do this
GET: /books?published=true&page=2&page_size=10

# 9\. Do not nest resources

My personal recommendation is to **use query string parameters** to filter the `books` resource directly:

GET: /books?author=Dan

And this clearly means: “Get all books for author name Dan”

# 10\. Know the difference between `401 Unauthorized` and `403 Forbidden`

- Has the consumer not provided authentication credentials? Was their SSO Token invalid/timed out? 👉 `401 Unauthorized`.
- Was the consumer _correctly authenticated_, but they _don’t have the required permissions/proper clearance_ to access the resource? 👉 `403 Forbidden`.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to Negotiate for a Better Salary]]></title>
            <link>https://danfleser.com/posts/20220211001015-negotiate-salary</link>
            <guid>20220211001015-negotiate-salary</guid>
            <pubDate>Fri, 11 Feb 2022 00:10:15 GMT</pubDate>
            <content:encoded><![CDATA[
## When making a big professional change, you may not feel you’re entitled to ask for more money. Do it anyway.

There’s a lot of excellent negotiating advice available. You can find it in dozens of career books or online. Here’s a quick synopsis:

- Defer the in-depth salary discussion until after you have an official offer in hand.
- Research your market value and how to relay it to the employer based on what you bring to the role.
- Focus on your worth in the market, not what you personally want or need or what you were making in the last position.
- Never accept an offer on the spot, even a seemingly great offer. There’s always something to negotiate.
- Negotiate directly with the hiring manager (versus the headhunter or human resources).
- Be confident and respectful, not demanding or entitled.
- Don’t drag out the negotiations over multiple meetings. Know your negotiating points and alternative options so you can be efficient.
- Know your BATNA (best alternative to a negotiated agreement) and your walk-away number.

All these steps are important. Just add this one vital strategy: _Go into the negotiation meeting assuming positive intent on the part of the hiring manager._ While it’s advisable to prepare your rationale—it will give you the confidence and data support you need—you’ll end up with a better outcome by going into the discussion expecting success. Hiring managers anticipate that you will negotiate. Unless your requests are completely unreasonable or presented as demands, managers will likely be happy to revise the offer if they’re able. Even if they can’t give you exactly what you want, ask if they can meet you in the middle.

Keep the large view of a compensation package in mind. Look at the _total_ compensation. You may not be losing as much as you think if the company covers tuition reimbursement and your commute requires much less gas. It’s worth the extra effort to think creatively. Perhaps you have experiences that will add additional value. If your desktop publishing skills could save the company $5,000 annually on an external vendor, maybe they could add this amount to your salary when they hire you. Remember, if you don’t ask, the answer is always no.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Node.js Developer Roadmap for 2022]]></title>
            <link>https://danfleser.com/posts/20220210231236-nodejs-roadmap-2022</link>
            <guid>20220210231236-nodejs-roadmap-2022</guid>
            <pubDate>Thu, 10 Feb 2022 23:12:36 GMT</pubDate>
            <content:encoded><![CDATA[
## JavaScript

- Arrow Functions
- Types
- Expressions
- Functions
- Lexical Structures
- this
- Loops and Scope
- Arrays
- Template Literals
- Strict Mode
- ES6/ES7
- Timers
- Promises
- Closures
- The Event Loop
- Async programming and callbacks

## Node.js Basics

**Event Emitters:** They are objects in **Node.js** that trigger events by sending a message to signal that an action was completed. We can also write our own code that listens to events from an event emitter. _For example_, if you have done some frontend work, then you probably know how much interaction we need to handle in our applications, such as **mouse clicks, keyboard button presses,** and other mouse movements. Similarly, on the backend environment in Node.js, we can build a similar system using the events module, which offers **EventEmitter** class which we use to handle our events.

**Callbacks:** These are functions called when a task is completed, which prevents any kind of blocking while allowing the rest of the code to run in the meantime. As we have to work with a lot of asynchronous tasks in Node.js, we need them everywhere for making seamless and faster applications. **For example,**

**Buffers:** A class called Buffer in Node.js is designed to handle raw binary data. They correspond to some raw memory allocated outside **V8**. Buffers are an array of integers that can’t be resized having a whole bunch of methods specifically for binary data. For example, the integers in buffer represent a byte with limited values from **0** to **255** inclusive, if you **_console.log()_** to print a Buffer instance, a chain of values in hexadecimal will be received.

**Module System:** As a part of the Node.js ecosystem you will be using the Module for implementing complex functionality by just using the Modules provided by Node.js, these are JavaScript files that contain all the organized and complex features that anyone can reuse through the Node.js application.

## Development Skills

**Version Control Systems (Git, GitHub):** You don’t want to be in a situation where you mess up something in your code while having no idea how to revert it. Using VCS like **Git** you can manage large scale projects & if you are already pretty familiar with using VCS then make sure that you have strong fundamental of Version Control Systems.

**HTTP/HTTPS protocols:** A fundamental knowledge of how the data is transferred using the transfer protocols will make you a better Node.js developer, a good understanding of how HTTP and HTTPS work is something every backend developer should understand well enough. HTTPS uses an encryption protocol known as Transport Layer Security **(TLS)**to encrypt communications. There is a lot to learn in the backend environment and it might get a little foggy for you if you had no idea how the web works, there are 4 request methods responsible for any basic communication on the web:

- **GET:** Used to retrieve a representation of a resource
- **POST:** Used to create new resources
- **PUT:** Used to update capabilities
- **PATCH:** Used to modify capabilities
- **DELETE:** Used to delete a resource identified by a URL
- **OPTIONS:** Request permitted communication option for a given URL or server

## Web Frameworks

**Express.js:** Provides a very minimal interface and tools that are required to build our application, quite flexible to use, and comes with numerous modules available on **npm** which can be plugged directly into Express.

**Koa.js:** If you are looking to build robust applications that are future proof and easy to maintain then Koa.js is a good choice. A **Koa** application is an object containing an array of some middleware functions that are later executed in a manner of stacks.

**Nest.js:** Inspired by Angular and built with **TypeScript**, uses Express.js under the hood which makes it compatible with most of Express middleware. You can build an efficient and scalable application with Nest.js as it provides a great modular structure for organizing code into separate modules.

## Database Management

**SQL Server:** A relational database management system developed by Microsoft, it supports **ANSI SQL** (a standard SQL language). However, SQL comes with its own implementations.

**MySQL:** Another great database management system that allows you to mage relational databases. Open-source backend software developed by Oracle, also with MySQL we get the flexibility of choices as we can change the source code according to the needs. MySQL is a pretty easy alternative as compared to **Oracle Database** & **Microsoft SQL server.**

**PostgreSQL:** Developed by a worldwide team of developers as it is open source. It runs on all major operating systems including Linux, UNIX & Windows. PostgreSQL supports a large part of the SQL standard while offering some great features such as **Complex SQL queries, Foreign Keys, Trigger, Transactions, Multiversion concurrency control (MVCC), Streatimg Repllicartons, etc.**

**MariaDB:** An improved version of MySQL that comes which various inbuilt powerful features, security, and performance improvements that you will not find in MySQL. There are several reasons why you should opt for MariaDB instead of MySQL for large-scale applications. For example, MariaDB has a larger connection pool supporting up to 200,000+ connections whereas MySQL has a smaller connection pool. _In short,_ **_MariaDB_** _is faster than_ **_MySQL_**_._

## Cloud Database Services

**Azure CosmosDB:** A database service that is globally distributed, you can manage your data remotely, using cloud databases gave you many advantages as scaling and managing big applications becomes a bit easy with the tool that you can use to scale and distribute, all provided by **Microsoft Azure**. Also, it supports multiple data models using one backend, which means it can be used for the document, key-value, relational & graph models. As it doesn’t rely on any schemas you can call it a **NoSQL** database, but it does support query language with **_ACID_** transaction support.

**Amazon DynamoDB:** As far as my knowledge **Amazon DynamoDB** is a great alternative if you already have some experience with SQL, it is a fully managed NoSQL database service providing faster and predictable performance with awesome scalability. You can create databases tables that can store and retrieve any amount of data and serve any level of request traffic

## NoSQL Databases

**MongoDB:** A document-oriented NoSQL database specifically used for high volume data storage, as we have tables and rows in other relational databases, MongoDB uses collections and documents. A document consists of key-value pairs that are just basic unit of data in MongoDB & collection contains sets of documents and function which is the equivalent of relational databases tables

**Redis:** Using Redis we can work with databases, caching, and message broking. It uses data structures like **strings, hashes, lists, sets, bitmaps, hyperloglogs** & **geospatial indexes** to store data in the form of key-value pairs. If you are confused about where we use Redix, here is an example of that.

Let’s say in our application we have to deal with users who are authorized to take different actions within the application, each time we authenticate a user we have to derive their authorization for controlling acces in the applicaation.There is nothing buggy about this approach as we have good standards like **JOSE** while keeping our **key material safe**, but if our application has more than a couple of authorisations, the same becomes very hard to scale. And instead of sendind the list of authorization to the user, we can store the user’s authorization in some form of database and provide the user a **key-value** (known as a token) which they have to send us for authorization.

## Apache Cassandra

A highly scalable with high-performance and distributed database designed to handle a large amount of data across many servers, with no single point of failure. Created at **Facebook** it differs from other relational database management systems. The distributed design is based on Amazon’s **DynamoDB** and the data model on **Google’s BigTable**.

## Search Engines

**_Note:_** _If you are thinking why do we need a search engine, then here is an example, we use Google as a search engine, but that’s itself a whole web based application._ **_Solr_** _and_ **_ElasticSearch_** _are backend frameworks and if any type of data set is provided it creates an index on top of that while making that data available for search on a server. You can maintain a website with million of users with Solr as the search engine._

## ElasticSearch

A search and analytics engine built on **Apache Lucene** and developed in **Java**. Using ElasticSearch you can store, and analyze huge volumes of data in real-time. As it searches the index instead of searching the text, great search performance is also achieved in ElasticSearch. At its core, it uses structure-based documents instead of tables and schemas that come with extensive **_REST APIs_** for storing and searching data. You can think of ElasticSearch as a server that processes **_JSON_** requests and giving you back JSON data.

## Memory Cache

This technique is also commonly called caching as most of the time, the caching is associated with the memory in servers. In this technique, a portion of the server’s memory is used as a cache where we store all the data that is required to reduce network calls in our applications. In Node.js we have **node-cache** and **memory-cache** as some great libraries to handle memory cache in a Node server.

## Distributed Cache

In this caching technique we combine the memory of multiple networks into a single memory data store which we later use as the final data cache to prove fast access to the data. This technique is especially used in a high volume of data and a huge number of network calls at the same time allows incremental expansion and scaling by adding more server memory to the cluster.

## Socket.io

There is a lot when it comes to understanding real-time communication in Socket.IO if you are just getting started as a backend developer, the main logic behind real-time communication stands between the **client** and the **server.** It allows the flow of **bi-directional** data between the client & server, you can think of bi-directional data flow as the synchronous flow of data between two terminals to achieve the real-time communication behavior, these types of behavior are enabled when the client has Socket.IO in the browser along with the server integrated with Socket.IO package. And the data can be sent in the form of **JSON** requests.

## REST

Before REST, APIs were developed around a remote procedure call (RPC) and the APIs looked like some locally executed code. Many technologies tried to solve this problem using RPC-like stacks to hide the root problem and after that REST was introduced to build web-based APIs in a better way.

In REST the architecture is styled with simple HTTP calls to communicate instead of complex options like **COBRA, COM+, RPC**. In REST the calls are messages based and rely on the _HTTP_ standards to describe these messages. In the **_Node.js_** ecosystem, you can go for the **node-rest-client** and **Axios**, both serve pretty good service for faster web applications.

## GraphQL

A great alternative to REST, GraphQL uses the APIs that prioritize giving clients exactly the data they request. A flexible and developer-friendly alternative, as you can deploy it even in an IDE known as **GraphiQL.** You also get the advantages to add or deprecate fields without impacting existing **queries** and build APIs with whatever method is preferred.

## Unit Testing Frameworks

**Jest:** A very popular testing framework known for its simplicity and developed by **Facebook**. Among all the testing frameworks Jest has the best documentation with parallel testing support, which means that you can run each test in their own process to maximize performance.

**Mocha:** It serves the old standards of Unit Testing frameworks for Node applications and supports async operations like callbacks, promises with highly extensible and customizable assertions.

**Chai:** It can be used alongside Mocha and can be used as a **_TDD/BDD_** assertion library for Node.js that can be paired with any testing framework based on **JavaScript**.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Best React Hacks For Lazy Devs]]></title>
            <link>https://danfleser.com/posts/20220210230144-react-hacks-for-lazy-devs</link>
            <guid>20220210230144-react-hacks-for-lazy-devs</guid>
            <pubDate>Thu, 10 Feb 2022 23:01:44 GMT</pubDate>
            <content:encoded><![CDATA[
## 1. Adding console logs to render expressions

If you wanna log the props to an expression style component but can’t be bothered to convert it, put the log in parentheses then add chopsticks `||`:

<img
  src="/images/20220210230144-1.png"
  alt="Adding console logs to render expressions"
/>

Note. you have to use the _or_ operator because console.log returns undefined.

## 2. Trace a function’s call with the Error object

If you’ve no idea where a function’s being called from, log an `Error` object in it and you’ll get a stack trace in the console:

<img
  src="/images/20220210230144-2.png"
  alt="Trace a function’s call with the Error object"
/>

## 3. Ternary question marks

Want to write more ternary question marks? Most people know that using `||` and `&&` is a super quick way of writing conditions, but did you know there’s a `??` as well?

<img src="/images/20220210230144-3.png" alt="Ternary question marks" />

This says, if `state?.bookings` is undefined return `{}`.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Roadmap for React js developers in 2022]]></title>
            <link>https://danfleser.com/posts/20220210224305-react-roadmap</link>
            <guid>20220210224305-react-roadmap</guid>
            <pubDate>Thu, 10 Feb 2022 22:43:05 GMT</pubDate>
            <content:encoded><![CDATA[
<img src="/images/react-roadmap.png" alt="Roadmap for React js developers" />

### Resources

- [ReactStrap](https://reactstrap.github.io/)
- [Ant Design](https://ant.design/)
- [Blueprint JS](https://blueprintjs.com/)
- [Evergreen](https://evergreen.segment.com/)
- [Storybook](https://storybook.js.org/)

### Unit Testing

- [Jest](https://facebook.github.io/jest/)
- [React testing library](https://testing-library.com/docs/react-testing-library/intro)
- [Enzyme](http://airbnb.io/enzyme/)
- [Sinon](http://sinonjs.org/)
- [Mocha](https://mochajs.org/)
- [Chai](http://www.chaijs.com/)
- [AVA](https://github.com/avajs/ava)
- [Tape](https://github.com/substack/tape)

### End to End Testing

- [Selenium](https://www.seleniumhq.org/)
- [Webdriver](http://webdriver.io/)
- [Cypress](https://cypress.io/)
- [Puppeteer](https://pptr.dev/)
- [Cucumber.js](https://github.com/cucumber/cucumber-js)
- [Nightwatch.js](http://nightwatchjs.org/)

### Integration Testing

- [Karma](https://karma-runner.github.io/)

### Internationalization

- [React Intl](https://github.com/yahoo/react-intl)
- [React i18next](https://react.i18next.com/)

### Server-Side Rendering

- [Next.js](https://nextjs.org/)
- [After.js](https://github.com/jaredpalmer/after.js)
- [Rogue](https://github.com/alidcastano/rogue.js)
- [Frotinity](https://frontity.org/)

### Static Site Generator

- [Next.js](https://nextjs.org/)
- [Jamstack](https://jamstack.org/generators/)
- [Gatsby](https://www.gatsbyjs.org/)

### Mobile

- [React Native](https://facebook.github.io/react-native/)
- [Cordova](https://cordova.apache.org/)
- [Phonegap](https://phonegap.com/)

### Desktop

- [Proton Native](https://proton-native.js.org/)
- [Electron](https://electronjs.org/)
- [React Native Windows](https://github.com/Microsoft/react-native-windows)

### Virtual Reality

- [React 360](https://facebook.github.io/react-360/): This allows you to be exciting 360 and VR experiences using React.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tools Every Remote Product Manager’s should use in 2022 ]]></title>
            <link>https://danfleser.com/posts/20220210222838-product-managers-fav-tools-2022</link>
            <guid>20220210222838-product-managers-fav-tools-2022</guid>
            <pubDate>Thu, 10 Feb 2022 22:28:38 GMT</pubDate>
            <content:encoded><![CDATA[
## [Slack](http://slack.com)

Really does take the cake when it comes to company wide communication.
Integrations and automations (Zoom, Around, Linear, Figma, etc) to make things easier to view, monitor, and/or take action on.

It’s the most powerful and effective tool I use every single day.

## [Zoom](http://zoom.us)

The easiest and most reliable video/audio conferencing software I’ve ever used, period.

## [Notion](http://notion.so)

I quickly realized Notion is one of the most flexible “productivity” apps that I’ve ever used — one piece of software to take meeting notes, write requirements, connect pieces of data between pages and tables, and much more. I use Notion multiple times a day and actually look forward to the experience.

## [Otter.ai](http://otter.ai)

Interesting tool that helps me record (audio only) and transcribe important meetings.

## [Hotjar](https://www.hotjar.com/)

Allows for playback session of users sessions and makes it extremely easy to gather feedback from actual users.

## [Linear](http://linear.app)

The better task management tools I’ve used in my PM career — I call it JIRA’s hipster, younger brother. It’s straightforward and makes sense to track software development projects, software bugs, roadmaps, etc.

## [Whimsical](https://whimsical.com/)

My preferred tool for wireframing, process documentation, prototyping, etc. It’s extremely simple while remaining wildly flexible and collaborative.

A good project manager also has to have a standing desk.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Top 6 Hardest FAANG Interviews Coding Questions]]></title>
            <link>https://danfleser.com/posts/20220209205657-top-6-hardest-faang-interviews-coding-questions</link>
            <guid>20220209205657-top-6-hardest-faang-interviews-coding-questions</guid>
            <pubDate>Wed, 09 Feb 2022 20:56:57 GMT</pubDate>
            <content:encoded><![CDATA[
- How would you improve shopping experience via Alexa?
- How to design a garbage collector?
- How would you design a YouTube for senior citizens?
- How to implement an LRU cache?
- How would you design a library for future?
- How would you design toothbrush for young children?
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[19 lessons I wish I'd known earlier in my software engineering career]]></title>
            <link>https://danfleser.com/posts/20220208213007-19-lessons-i-wish-id-known-earlier-in-my-software-engineering-career</link>
            <guid>20220208213007-19-lessons-i-wish-id-known-earlier-in-my-software-engineering-career</guid>
            <pubDate>Tue, 08 Feb 2022 21:30:07 GMT</pubDate>
            <content:encoded><![CDATA[
### 1. Choose a language

You need to start slow. Practice as much as possible.

### 2. Understand a programming concept

If you don’t remember the syntax that’s fine, use Google to find answers.

### 3. Use online tutorials

You get multiple perspectives. It helps you learn faster and more efficiently.

### 4. Dedicate hours for learning every day in your calendar

Read blogs. Keep learning new things and use what you learned by building something useful.

### 5. Practice, Practice, Practice!

The saying “_practice makes perfect_” is very true if you’re willing to put in the time to be great at something.

### 6. Don’t give up

One key to becoming a good coder is to never give up.

### 7. Don’t reinvent the wheel

Not every solution needs to be built from scratch, use existing libraries.

### 8. Work on your soft skills

Practice writing, It helps you in the long run and will help you stand out from the rest.

### 9. Build a strong portfolio of projects

Learn + Build things, a win-win situation.

### 10. Document Your Journey

Write blog posts. Many people who are starting their journey today, are definitely going to be inspired by your writings.

### 11. Earn while you learn

More here - [Make money blogging while learning new things](https://danfleser.com/posts/20220204024814-why-how-to-blog-10-ways-developers-make-money-coding-course-e06/)

### 12. Define small goals

Take one thing at a time, this is the ultimate confidence booster.

### 13. Don’t be afraid to ask for help

Don’t feel shy to ask even if you have silly questions. Use [StackOverflow](https://stackoverflow.com/).

### 14. Challenge yourself

Don’t compete with others, compete with yourself.

### 15. Learn the basics and build small applications

Powerful foundation = 20+ small applications. Keep track in a github repo.

### 16. Refuse negative talk

Remember programmers never quit, there is always a workaround. Take a break and bounce back stronger.

### 17. Remember nobody is born a pro

Consistency, hard work and giving your best shot will make you a pro.

### 18. Nothing works unless you do

Practice makes a man perfect.

### 19. Focus on the process, not the outcome

If you have a solid foundation, the rest is easy to crack.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Contributing To Open Source 10 Ways Developers Make Money Coding Course E10]]></title>
            <link>https://danfleser.com/posts/20220204025234-contributing-to-open-source-10-ways-developers-make-money-coding-course-e10</link>
            <guid>20220204025234-contributing-to-open-source-10-ways-developers-make-money-coding-course-e10</guid>
            <pubDate>Fri, 04 Feb 2022 02:52:34 GMT</pubDate>
            <content:encoded><![CDATA[
As a web developer, you have the opportunity to contribute to open-source projects.

You can contribute by fixing bugs or implementing features.

It's is a great way to get involved with the community and make new connections.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/qVN9FIY0j4Y"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mentoring 10 Ways Developers Make Money Coding Course E09]]></title>
            <link>https://danfleser.com/posts/20220204025140-mentoring-10-ways-developers-make-money-coding-course-e09</link>
            <guid>20220204025140-mentoring-10-ways-developers-make-money-coding-course-e09</guid>
            <pubDate>Fri, 04 Feb 2022 02:51:40 GMT</pubDate>
            <content:encoded><![CDATA[
Have sharp skills in web development? A good way to make money is to educate others on how to build websites.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/Ni6Jlkj4Xuo"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Working As A Professional Developer 10 Ways Developers Make Money Coding Course E08]]></title>
            <link>https://danfleser.com/posts/20220204025040-working-as-a-professional-developer-10-ways-developers-make-money-coding-course-e08</link>
            <guid>20220204025040-working-as-a-professional-developer-10-ways-developers-make-money-coding-course-e08</guid>
            <pubDate>Fri, 04 Feb 2022 02:50:40 GMT</pubDate>
            <content:encoded><![CDATA[
Many companies hire people remotely to create websites and applications for them. If your skill is good, then you can earn up to $500K/year by working full-time in these companies. Traveling and working remotely part-time is another way of living.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/uJKVk7cv3Dw"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Freelancing 10 Ways Developers Make Money Coding Course E07]]></title>
            <link>https://danfleser.com/posts/20220204024943-freelancing-10-ways-developers-make-money-coding-course-e07</link>
            <guid>20220204024943-freelancing-10-ways-developers-make-money-coding-course-e07</guid>
            <pubDate>Fri, 04 Feb 2022 02:49:43 GMT</pubDate>
            <content:encoded><![CDATA[
You can work for different types of clients from different countries while working from home.

You may know that the websites like freelancer, Fiverr & Upwork provide you with such opportunities.

If you can make yourself a brand, then there are many more opportunities for you like contacting direct clients, getting clients from Linked In and Twitter.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/JjGTrdJkiJs"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why&How To Blog 10 Ways Developers Make Money Coding Course E06]]></title>
            <link>https://danfleser.com/posts/20220204024814-why-how-to-blog-10-ways-developers-make-money-coding-course-e06</link>
            <guid>20220204024814-why-how-to-blog-10-ways-developers-make-money-coding-course-e06</guid>
            <pubDate>Fri, 04 Feb 2022 02:48:14 GMT</pubDate>
            <content:encoded><![CDATA[
Web Developers can make a passive income just by writing blog posts. You don't need to be an expert content writer. Just share your thoughts with other developers.

Consider, blog as an asset where you're giving someone a place to rent on a monthly/yearly basis.
You can start by sharing what you are learning if you do not have a blog yet. You can start with the platforms that already exist: medium, dev.to

It's all about traffic and the audience you can bring to your blog. After getting attention from viewers on your blog posts, you can then start selling them digital products and you can utilize affiliate marketing.

The required knowledge to make traffic:
SEO and Email marketing

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/E5XNUr04p7k"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Software-as-a-service 10 Ways Developers Make Money from Home E05]]></title>
            <link>https://danfleser.com/posts/20220204024621-software-as-a-service-10-ways-developers-make-money-from-home-e05</link>
            <guid>20220204024621-software-as-a-service-10-ways-developers-make-money-from-home-e05</guid>
            <pubDate>Fri, 04 Feb 2022 02:46:21 GMT</pubDate>
            <content:encoded><![CDATA[
Make money by charging users for using your web application.

A SaaS is an application or website that allows people to sign up and pay for the service.

Analyze the market and explore people's needs and urges for a repeating process and build software by automatizing that process.

Focus on the demand. Try to understand customers and bring them real value.

Look at how your competitors are building their products. How big is this market? Is it growing? Are there enough potential customers so that you can build a successful business on top of it?

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/lnwifUqJ7HU"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Digital Products 10 Ways Developers Make Money Working from Home E04]]></title>
            <link>https://danfleser.com/posts/20220204024527-digital-products-10-ways-developers-make-money-working-from-home-e04</link>
            <guid>20220204024527-digital-products-10-ways-developers-make-money-working-from-home-e04</guid>
            <pubDate>Fri, 04 Feb 2022 02:45:27 GMT</pubDate>
            <content:encoded><![CDATA[
No matter what you build, there is a market for it online.

You can create courses, software, ebooks, or any digital product that you later distribute to customers worldwide.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/ORbLO2rjHaQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Online Courses 10 Ways Developers Make Money Working from Home E03]]></title>
            <link>https://danfleser.com/posts/20220204024416-online-courses-10-ways-developers-make-money-working-from-home-e03</link>
            <guid>20220204024416-online-courses-10-ways-developers-make-money-working-from-home-e03</guid>
            <pubDate>Fri, 04 Feb 2022 02:44:16 GMT</pubDate>
            <content:encoded><![CDATA[
Online education has become one of the most popular ways to teach and learn online. With a simple online course, you can build your reputation as an expert, increase your income, attract clients, boost your creativity and grow your community.

Are you passionate about teaching web development? Why not utilize it as a business opportunity and create your online course to start to earn money.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/zs4abEW9nNk"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Live Coding Streaming 10 Ways Developers Make Money Working from Home E02]]></title>
            <link>https://danfleser.com/posts/20220204024041-live-coding-streaming-10-ways-developers-make-money-working-from-home-e02</link>
            <guid>20220204024041-live-coding-streaming-10-ways-developers-make-money-working-from-home-e02</guid>
            <pubDate>Fri, 04 Feb 2022 02:40:41 GMT</pubDate>
            <content:encoded><![CDATA[
Live web development is a new and emerging source of income for web developers with the right skills.

Real-time live demonstrations of building web applications can be a very engaging experience for beginner developers who try to learn how to build web applications.

The goal is to show developers what the end-product should look like but also to help & engage them in their journey towards becoming great software engineers.

Earn money from live coding, teaching other people how to code, or simply showing your skills in front of thousands of people.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/d7jczFpBKl0"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Running A Youtube Channel - 10 Ways Developers Make Money Working from Home - E01]]></title>
            <link>https://danfleser.com/posts/20220204003211-running-a-youtube-channel---10-ways-developers-make-money-working-from-home---e01</link>
            <guid>20220204003211-running-a-youtube-channel---10-ways-developers-make-money-working-from-home---e01</guid>
            <pubDate>Fri, 04 Feb 2022 00:32:11 GMT</pubDate>
            <content:encoded><![CDATA[
YouTube is a great platform where you can make money by making videos on different topics or about things that you know or are passionate about.

If you're a web developer and know how to educate others on how to build websites, then it's time for you to start earning money by running a Youtube Channel.

The process is simple:
Create interesting content for the viewers.
Post your videos regularly & share them with your audience on social media.
Once, you'll start getting love from the audience in the shape of subscribers, likes & views. You can then monetize your channel from google AdSense, bring sponsors & do affiliate marketing.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/MMbp6eNk4Q8"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MEAN/MERN/MEVN vs LAMP vs Serverless]]></title>
            <link>https://danfleser.com/posts/20220203002942-mean-mern-mevn-vs-lamp-vs-serverless</link>
            <guid>20220203002942-mean-mern-mevn-vs-lamp-vs-serverless</guid>
            <pubDate>Thu, 03 Feb 2022 00:29:42 GMT</pubDate>
            <content:encoded><![CDATA[
## Which tech stack to use

MEAN is an open source, high-level, **Javascript-based stack** best used for building dynamic websites and applications.

<img src="/images/mean.png" alt="MEAN stack" />

The layers of MEAN are:

- [**MongoDB**](https://www.mongodb.com/): A NoSQL database that uses binary JSON documents with schema.
- [**Express.js**](https://expressjs.com/): A modular web application framework for Node.js.
- [**AngularJS**](https://angularjs.org/): A client-side application framework used to build end-user interfaces separate from the business logic. Can also be replaced with similar popular frontend frameworks like React or Vue.
- [**Node.js**](https://nodejs.org/en/): An application runtime environment that represents the “JavaScript everywhere” paradigm that MEAN is known for.

Used by Netflix, Paypal, The Weather Channel, and Forbes.

**Pros**

- All tools are open source and use JavaScript, allowing for full-stack development.
- Great performance for SPAs.
- Usable on any operating system.

**Cons**

- Hard to adopt into existing architectures that don't use JavaScript.
- Risk losing data during heavy workflows.
- Maintenance can be a hassle, frequent updates and changes.

## MERN

The MERN stack is a variation on MEAN that replaces Angular with [React](https://reactjs.org/).

<img src="/images/react-mern.png" alt="MERN stack" />

**Pros**

- Build a simple to intermediate single-page application in the quickest time possible.
- Optimized for SPAs.
- There are more React developers than Angular developers.

**Cons**

- Sacrificing some functionality without a full framework

## MEVN

Similar to MERN, MEVN replaces Angular with [Vue.js](https://vuejs.org/).

**Pros**

- Faster performance than React and Angular
- Ready to go right out of the box
- Cost-effective due to simplicity to use

**Cons**

- Might lack some resources, as is the least popular of the three frameworks
- Scalability is not a big plus so don’t plan to add any fancy application features.

LAMP is the world’s **most popular tech stack**, designed to build applications without reliance on external software or data.

The layers of LAMP are

- [**Linux**](https://www.linux.org/): An open source, Unix-like operating system consisting of a package management system around a Linux kernel.
- [**Apache web server**](https://httpd.apache.org/): A highly popular and fully-featured web server, used by 54% of all sites on the web.
- [**MySQL**](https://www.mysql.com/): A multithreaded SQL relational database management system built for at-scale use.
- [**PHP**](https://www.php.net/): A server-side scripting language designed for web development.

**Pros**

- Widespread support for each technology in the stack.
- Mature stack with a wealth of previous solutions and customizations to draw from.
- Non-blocking structure makes it easy to scale and faster to develop.
- LAMP is fully open source.
- PHP and MySQL are easy to learn and work with.

**Cons**

- Limited to only Linux operating system.
- Difficult to switch between backend and frontend tools.
- Projected to decline in use over time due to the prevalence of JavaScript and the cloud.

## Serverless

Nowdays companies shift from managing their own app infrastructure to instead building cloud-native serverless applications.

**Pros**

- Perfect for small startup that cannot afford to hire a full team to manage your application’s tech stack
- Cost-effective for small businesses and startups.
- No need to manage or maintain your own technologies.

**Cons**

- Less control over what technologies are in the stack.
- Scaling costs will make this ineffective beyond a certain size.

How do you choose?

**You’ll want to consider**

- What type of app will it be? Cloud-based, hybrid, etc.?
- What is the expected lifetime of this application?
- What technologies are available in my client’s infrastructure? Will it be standardized or varied?
- How much traffic will your application need to handle? Does the traffic happen in spikes or steady flow?
- How dynamic will your application be? Will it update in real time?
- How much retraining will your team need to do?
- How much maintenance do you want to allocate to the application?

As a general rule, MEAN is better for smaller-scale modern applications, like progressive web apps, cloud-based applications, or single-page applications. LAMP is better for larger-scale applications that prioritize uptime and availability.

You can use this the website [Stackshare](https://stackshare.io/) to check other companies tech stack.

<img src="/images/stackshare.png" alt="MERN stack" />
]]></content:encoded>
        </item>
    </channel>
</rss>