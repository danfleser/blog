<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://danfleser.com/</id>
    <title>Development blog</title>
    <updated>2022-02-22T19:14:20.038Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>Dan Fleser</name>
    </author>
    <link rel="alternate" href="https://danfleser.com/"/>
    <rights>Copyright © 2022 Dan Fleser</rights>
    <entry>
        <title type="html"><![CDATA[The 10 Websites To Host Your Side Project]]></title>
        <id>20220220210227-websites-to-host-your-side-project-for-free</id>
        <link href="https://danfleser.com/posts/20220220210227-websites-to-host-your-side-project-for-free"/>
        <updated>2022-02-20T21:02:27.898Z</updated>
        <summary type="html"><![CDATA[Websites To Host Your Side Project for Free]]></summary>
        <content type="html"><![CDATA[
# 1. [Vercel](https://vercel.com/)

- HTTPS-enabled Custom Domains
- Continuous Deployment with Git
- High-performance Edge Network
- Unlimited Websites & APIs
- Serverless Functions in Node.js, Go, and more

# 2. [Netlify](https://www.netlify.com/)

- Automated builds from Git
- Deploy to global Edge network
- Live site previews with a collaboration UI for team members
- Instant rollbacks to any version
- Deploy static assets & dynamic serverless functions

# 3. [AWS](https://aws.amazon.com/)

- Most functionality
- Largest community of customers and partners
- Most secure
- Fastest pace of innovation
- Most proven operational expertise

# 4. [GitHub Pages](https://pages.github.com/)

- Blogging with Jekyll
- Custom URLs

# 5. [Heroku](https://www.heroku.com/)

- Code and data rollback
- GitHub Integration
- App metrics
- Continuous delivery
- Extensibility
- Smart containers

# 6. [Google Cloud](https://cloud.google.com/)

- Smart analytics
- Infrastructure modernization
- Application modernization
- Business application platform
- Productivity & collaboration

# 7. [Firebase](https://firebase.google.com/)

- A/B Testing
- Analytics
- App Distribution
- App Indexing

# 8. [Awardspace](https://www.awardspace.com/)

- Host up to 4 Websites
- CMS Installer
- Web Based File Manager

# 9. [Surge](https://surge.sh/)

- Securing your custom domain with SSL
- Forcing HTTP to redirect to HTTPS by default
- Adding password protection to a project
- Enabling Cross-Origin Resource Sharing
- Adding custom redirects

# 10. [Render](https://render.com/)

- Automatic continuous deploys from Git
- Custom domains with fully managed SSL
- Unlimited collaborators
- 100 GB/month bandwidth included

# Conclusion

> . Don’t forget to clap 👏 in the comment section below if you learned something new.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🔥Handy Copy-Paste Javascript Snippets Part 3]]></title>
        <id>20220220202610-copy-paste-javascript-snippets-3</id>
        <link href="https://danfleser.com/posts/20220220202610-copy-paste-javascript-snippets-3"/>
        <updated>2022-02-20T20:26:10.939Z</updated>
        <summary type="html"><![CDATA[A list of useful code snippets for lazy developers.]]></summary>
        <content type="html"><![CDATA[
👉 Part 1 -> [🔥Handy Copy-Paste Javascript Snippets Part 1](http://danfleser.com/posts/20220219132839-copy-paste-javascript-snippets)
👉 Part 2 -> [🔥Handy Copy-Paste Javascript Snippets Part 2](http://danfleser.com/posts/20220220202431-copy-paste-javascript-snippets-2)

# Strings

# Check if a path is relative

```js
const isRelative = (path) => !/^([a-z]+:)?[\\/]/i.test(path); // Examples
isRelative("/foo/bar/baz"); // false
isRelative("C:\\foo\\bar\\baz"); // false
isRelative("foo/bar/baz.txt"); // true
isRelative("foo.md"); // true
```

# Make the first character of a string lowercase

```js
const lowercaseFirst = (str) => `${str.charAt(0).toLowerCase()}${str.slice(1)}`;
// Example
lowercaseFirst("Hello World"); // 'hello World'
```

# Repeat a string

```js
const repeat = (str, numberOfTimes) => str.repeat(numberOfTimes);
```

# Check if a string is a hexadecimal color

```js
const isHexColor = (color) =>
  /^#([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i.test(color); // Examples
isHexColor("#012"); // true
isHexColor("#A1B2C3"); // true
isHexColor("012"); // false
isHexColor("#GHIJKL"); // false
```

# Dates

# Add “am/pm” suffix to an hour

```js
// `h` is an hour number between 0 and 23
const suffixAmPm = (h) =>
  `${h % 12 === 0 ? 12 : h % 12}${h < 12 ? "am" : "pm"}`; // Examples
suffixAmPm(0); // '12am'
suffixAmPm(5); // '5am'
suffixAmPm(12); // '12pm'
suffixAmPm(15); // '3pm'
suffixAmPm(23); // '11pm'
```

# Calculate the number of different days between two dates

```js
const diffDays = (date, otherDate) =>
  Math.ceil(Math.abs(date - otherDate) / (1000 * 60 * 60 * 24)); // Example
diffDays(new Date("2014-12-19"), new Date("2020-01-01")); // 1839
```

# Check if a date is valid

```js
const isDateValid = (...val) => !Number.isNaN(new Date(...val).valueOf());
isDateValid("December 17, 1995 03:24:00"); // true
```

# **Miscellaneous**

# Check if the code is running in Node.js

```js
const isNode =
  typeof process !== "undefined" &&
  process.versions != null &&
  process.versions.node != null;
```

# Check if the code is running in the browser

```js
const isBrowser = typeof window === "object" && typeof document === "object";
```

# Convert URL parameters to object

```js
const getUrlParams = (query) =>
  Array.from(new URLSearchParams(query)).reduce(
    (p, [k, v]) =>
      Object.assign({}, p, {
        [k]: p[k] ? (Array.isArray(p[k]) ? p[k] : [p[k]]).concat(v) : v,
      }),
    {}
  ); // Examples
getUrlParams(location.search); // Get the parameters of the current URLgetUrlParams('foo=Foo&bar=Bar'); // { foo: "Foo", bar: "Bar" }// Duplicate key
getUrlParams("foo=Foo&foo=Fuzz&bar=Bar"); // { foo: ["Foo", "Fuzz"], bar: "Bar" }
```

# Detect dark mode

```js
const isDarkMode =
  window.matchMedia &&
  window.matchMedia("(prefers-color-scheme: dark)").matches;
```

# Swap two variables

```js
[a, b] = [b, a];
```

# Copy to clipboard

```js
const copyToClipboard = (text) => navigator.clipboard.writeText(text); // Example
copyToClipboard("Hello World");
```

# Convert RGB to Hex

```js
const rgbToHex = (r, g, b) =>
  "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1); // Example
rgbToHex(0, 51, 255); // #0033ff
```

# Generate a random hex color

```js
const randomColor = () =>
  `#${Math.random().toString(16).slice(2, 8).padEnd(6, "0")}`; // Or
const randomColor = () => `#${(~~(Math.random() * (1 << 24))).toString(16)}`;
```

# Generate a random IP address

```js
const randomIp = () =>
  Array(4)
    .fill(0)
    .map((_, i) => Math.floor(Math.random() * 255) + (i === 0 ? 1 : 0))
    .join("."); // Example
randomIp(); // 175.89.174.131
```

# Generate a random string using the Node crypto module

```js
const randomStr = () => require("crypto").randomBytes(32).toString("hex");
```

# Conclusion

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🔥Handy Copy-Paste Javascript Snippets Part 2]]></title>
        <id>20220220202431-copy-paste-javascript-snippets-2</id>
        <link href="https://danfleser.com/posts/20220220202431-copy-paste-javascript-snippets-2"/>
        <updated>2022-02-20T20:24:31.325Z</updated>
        <summary type="html"><![CDATA[A list of useful code snippets for lazy developers.]]></summary>
        <content type="html"><![CDATA[
👉 Part 1 -> [🔥Handy Copy-Paste Javascript Snippets Part 1](http://danfleser.com/posts/20220219132839-copy-paste-javascript-snippets)
👉 Part 3 -> [🔥Handy Copy-Paste Javascript Snippets Part 3](http://danfleser.com/posts/20220220202610-copy-paste-javascript-snippets-3)

# DOM

# Check if an element is focused

```js
const hasFocus = (ele) => ele === document.activeElement;
```

# Get all siblings of an element

```js
const siblings = (ele) =>
  [].slice.call(ele.parentNode.children).filter((child) => child !== ele);
```

# Get selected text

```js
const getSelectedText = () => window.getSelection().toString();
```

# Go back to the previous page

```js
history.back(); // Or
history.go(-1);
```

# Clear all cookies

```js
const clearCookies = () =>
  document.cookie
    .split(";")
    .forEach(
      (c) =>
        (document.cookie = c
          .replace(/^ +/, "")
          .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`))
    );
```

# Convert cookie to object

```js
const cookies = document.cookie
  .split(";")
  .map((item) => item.split("="))
  .reduce((acc, [k, v]) => (acc[k.trim().replace('"', "")] = v) && acc, {});
```

# Arrays

# Compare two arrays

```js
// `a` and `b` are arrays
const isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b); // Or
const isEqual = (a, b) =>
  a.length === b.length && a.every((v, i) => v === b[i]); // Examples
isEqual([1, 2, 3], [1, 2, 3]); // true
isEqual([1, 2, 3], [1, "2", 3]); // false
```

# Convert an array of objects to a single object

```js
const toObject = (arr, key) =>
  arr.reduce((a, b) => ({ ...a, [b[key]]: b }), {}); // Or
const toObject = (arr, key) =>
  Object.fromEntries(arr.map((it) => [it[key], it])); // Example
toObject(
  [
    { id: "1", name: "Alpha", gender: "Male" },
    { id: "2", name: "Bravo", gender: "Male" },
    { id: "3", name: "Charlie", gender: "Female" },
  ],
  "id"
); /*
{
'1': { id: '1', name: 'Alpha', gender: 'Male' },
'2': { id: '2', name: 'Bravo', gender: 'Male' },
'3': { id: '3', name: 'Charlie', gender: 'Female' }
}
*/
```

# Count by the properties of an array of objects

```js
const countBy = (arr, prop) =>
  arr.reduce(
    (prev, curr) => ((prev[curr[prop]] = ++prev[curr[prop]] || 1), prev),
    {}
  ); // Example
countBy(
  [
    { branch: "audi", model: "q8", year: "2019" },
    { branch: "audi", model: "rs7", year: "2020" },
    { branch: "ford", model: "mustang", year: "2019" },
    { branch: "ford", model: "explorer", year: "2020" },
    { branch: "bmw", model: "x7", year: "2020" },
  ],
  "branch"
);
// { 'audi': 2, 'ford': 2, 'bmw': 1 }
```

# Check if an array is not empty

```js
const isNotEmpty = (arr) => Array.isArray(arr) && Object.keys(arr).length > 0; // Examples
isNotEmpty([]); // false
isNotEmpty([1, 2, 3]); // true
```

# Objects

# Check if multiple objects are equal

```js
const isEqual = (...objects) =>
  objects.every((obj) => JSON.stringify(obj) === JSON.stringify(objects[0])); // Examples
isEqual({ foo: "bar" }, { foo: "bar" }); // true
isEqual({ foo: "bar" }, { bar: "foo" }); // false
```

# Extract values of a property from an array of objects

```js
const pluck = (objs, property) => objs.map((obj) => obj[property]); // Example
pluck(
  [
    { name: "John", age: 20 },
    { name: "Smith", age: 25 },
    { name: "Peter", age: 30 },
  ],
  "name"
);
// ['John', 'Smith', 'Peter']
```

# Invert keys and values of an object

```js
const invert = (obj) =>
  Object.keys(obj).reduce((res, k) => Object.assign(res, { [obj[k]]: k }), {}); // Or
const invert = (obj) =>
  Object.fromEntries(Object.entries(obj).map(([k, v]) => [v, k])); // Example
invert({ a: "1", b: "2", c: "3" }); // { 1: 'a', 2: 'b', 3: 'c' }
```

# Remove all null and undefined properties from an object

```js
const removeNullUndefined = (obj) =>
  Object.entries(obj).reduce(
    (a, [k, v]) => (v == null ? a : ((a[k] = v), a)),
    {}
  ); // Or
const removeNullUndefined = (obj) =>
  Object.entries(obj)
    .filter(([_, v]) => v != null)
    .reduce((acc, [k, v]) => ({ ...acc, [k]: v }), {}); // Or
const removeNullUndefined = (obj) =>
  Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null)); // Example
removeNullUndefined({
  foo: null,
  bar: undefined,
  fuzz: 42,
});
// { fuzz: 42 }
```

# Sort an object by its properties

```js
const sort = (obj) =>
  Object.keys(obj)
    .sort()
    .reduce((p, c) => ((p[c] = obj[c]), p), {}); // Example
const colors = {
  white: "#ffffff",
  black: "#000000",
  red: "#ff0000",
  green: "#008000",
  blue: "#0000ff",
};
sort(colors); /*
{
black: '#000000',
blue: '#0000ff',
green: '#008000',
red: '#ff0000',
white: '#ffffff',
}
*/
```

# Check if an object is a Promise

```js
const isPromise = (obj) =>
  !!obj &&
  (typeof obj === "object" || typeof obj === "function") &&
  typeof obj.then === "function";
```

# Check if an object is an array

```js
const isArray = (obj) => Array.isArray(obj);
```

# Conclusion

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Startup Ideas That Will Skyrocket in 2022]]></title>
        <id>20220220153009-startup-ideas-for-2022</id>
        <link href="https://danfleser.com/posts/20220220153009-startup-ideas-for-2022"/>
        <updated>2022-02-20T15:30:09.642Z</updated>
        <summary type="html"><![CDATA[What are the hottest topics now and what are still exotic to the market of technology?]]></summary>
        <content type="html"><![CDATA[
# Startup Ideas

1. On-Demand Grocery Delivery and Store Management App
2. Fruits and Vegetable Quality Check and Rating App
3. On-Demand Restaurant Management App
4. On-Demand Restaurant Detector App
5. On-Demand Food Ordering and Delivery App
6. Restaurant Discount App Development
7. On-Demand Restaurant Table Booking App
8. On-Demand Peer-To-Peer Money Transfer APP
9. ML-Based Advising and Stock Trading App
10. Lending and Mortgage Approval App
11. End-To-End Banking App
12. Blockchain-Based Money Transfer and Payment App
13. Business Investment And Money Lending App
14. Online Property Sell and Buy App
15. Property Management App
16. Online Property Booking Solution
17. Online Study Material Providing App
18. Quiz Conducting App
19. Online Corporate Training Apps
20. Online Learning or Tutoring App
21. Language Learning App
22. Voice Translation App
23. Translating Images Into Words
24. On-Demand Pet-Food and Essential Delivery App
25. On-Demand Pet-care App
26. On-Demand Babysitter App
27. On-Demand Handyman Service Booking App
28. On-Demand Fuel Delivery App
29. On-Demand Car Repair and Services App
30. Health Inspector and Advisory App
31. Mood Tracking Solutions
32. Meditation Mindfulness App
33. Audio-Based Social Media App Like Clubhouse
34. Warehouse Management and Inventory Tracking App
35. On-Demand Lawn Maintenance and Moving App
36. Affordable Delivery and Postal Apps
37. GST Return Filing App
38. Social Rating App
39. Story Writing and Sharing App
40. Fashion Design and Shopping Recommendation App
41. Collective Shopping App Idea
42. VR Based Virtual Travel App
43. Toilet Finder App
44. Everyday Task Assistance App
45. Compatible Food Finder App
46. An App For Freelancers
47. Digital CV or Resume Creating App
48. Selling Used Clothes App
49. Safety Help Alert
50. Dating and Matrimonial App
51. Healthcare app
52. On-demand services app
53. CRM for small business:
54. Employee training app
55. Finance management app
56. Travel-planning app
57. AR shopping app
58. ML-based astrology
59. Memes developing app
60. News App Idea
61. YouTube radio/ChildTube:
62. Car services app
63. Family web app
64. Interior design app
65. Messages aggregator app
66. Help alert app

# Web Applications Type

Single-Page Applications(SPA): perform logic on the web browser and on the server, use a framework like Angular, React, Vue. They are quick, easy to debug and user-friendly; brightest examples are Gmail, Netflix, Facebook.

# Conclusion

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Most Developers Lack These Useful JavaScript Features]]></title>
        <id>20220219140317-modern-javascript-features</id>
        <link href="https://danfleser.com/posts/20220219140317-modern-javascript-features"/>
        <updated>2022-02-19T14:03:17.293Z</updated>
        <summary type="html"><![CDATA[Write less and do more with JavaScript. With JavaScript, you can do one thing in many different ways. Also, JavaScript is evolving with the release of every new ECMAScript specification, adding new useful methods and operators to make the code shorter, and somewhere more readable.]]></summary>
        <content type="html"><![CDATA[
# 1. Object.entries

Most developers use `Object.keys` method to iterate over an object. This method only returns an array of the object keys, not values. We can use `Object.entries` to get both key and value.

```js
const person = {
  name: "John",
  age: 20,
};
Object.keys(person); // ['name', 'age']
Object.entries(data); // [['name', 'John'], ['age', 20]]
```

And to iterate over an object we can do the following:

```js
Object.keys(person).forEach((key) => {
  console.log(`${key} is ${person[key]}`);
});
// using entries to get key and value both
Object.entries(person).forEach(([key, value]) => {
  console.log(`${key} is ${value}`);
});
// expected output:
// name is John
// age is 20
```

Both approaches above return the same result but Object.entries makes it easy to get key-value pair.

# 2. String replaceAll Method

In JavaScript, to replace all occurrences of a string with another string, we need to use a Regular Expression like the following:

```js
const str = "Red-Green-Blue";
// replaces the first occurrence only
str.replace("-", " "); // Red Green-Blue
// use RegEx to replace all occurrences
str.replace(/-/g, " "); // Red Green Blue
```

But in ES12, a new method is added to `String.prototype` named `replaceAll` which replaces all occurrences of a string with another string value.

```js
str.replaceAll("-", " "); // Red Green Blue
```

# 3. Numeric Separator

You can use an underscore `_` as a numeric separator, which makes it easy to count the number of zeros in a number.

```js
// difficult to read
const billion = 1000000000; // easier to read
const readableBillion = 1000_000_000;
console.log(readableBillion); // returns 1000000000
```

The underscore separator can also be used with BigInt numbers, like the following example:

```js
const trillion = 1000_000_000_000n;
console.log(trillion); // 1000000000000
```

# 4. document.designMode

Related to the frontend JavaScript, the design mode lets you edit any of the content on the page. Just open the browser console and type the following:

```js
document.designMode = "on";
```

Try yourself

It is helpful for designers as they don’t have to change things in code every time to the change on the screen.

# 5. Logical Assignment Operator

Logical assignment operators are a combination of logical operators `&&`, `||`, `??` and assignment operator `=`.

```js
const a = 1;
const b = 2;
a &&= b;
console.log(a); // returns 2
// the above statement is equivalent to
a && (a = b); // OR another approach
if (a) {
  a = b;
}
```

We’re checking if the value of `a` is truthy, if it is then we’re updating the value of `a`. The same can be done with logical OR `||` operator.

```js
const a = null;
const b = 3;
a ||= b;
console.log(a); // returns 3
// the above statement is equivalent to
a || (a = b);
```

And with the Nullish Coalescing operator `??`.

```js
const a = null;
const b = 3;
a ??= b;
console.log(a); // returns 3
// the above statement is equivalent to
if (a === null || a === undefined) {
  a = b;
}
```

The `??` operator only checks for `null` or `undefined` values.

# Conclusion

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[These Common JavaScript Mistakes Reduce Performance Drastically]]></title>
        <id>20220219134441-javascript-memory-mistakes</id>
        <link href="https://danfleser.com/posts/20220219134441-javascript-memory-mistakes"/>
        <updated>2022-02-19T13:44:41.800Z</updated>
        <summary type="html"><![CDATA[JavaScript doesn’t provide any memory management primitives. Instead, memory is managed by the JavaScript VM through a memory reclaim process. That process is known as Garbage Collection. Since we can’t force it to run, how do we know it will work properly? What do we know about it? Script execution is paused during the process. It frees memory for unreachable resources. It is non-deterministic. It will not inspect the whole memory in one go but will run in multiple cycles. It is unpredictable. It will execute when necessary.]]></summary>
        <content type="html"><![CDATA[
How can we prevent our web app from leaking memory? We have to avoid the retention of unnecessary resources. Let’s look at the most common scenarios where this might happen.

# Timer Listeners

Let’s look at the `setInterval` timer. It is a commonly used Web API feature.

The return of `setInterval` is an interval ID which we can use to cancel the interval. We can call `clearInterval` once the Component unmounts.

# Event Listeners

When using `addEventListener`, we need to use `removeEventListener` to remove it.

# Observers

> “The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document’s [viewport](https://developer.mozilla.org/en-US/docs/Glossary/Viewport).” — [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver)

Once you are done observing the object, you need to cancel out the monitor process.

# Holding DOM References

DOM nodes are not free from memory leaks either. You need to be careful not to hold references of them.

# Conclusion

It is recommended to periodically run the browser profiler tools on your web application. That is the only way to be sure that nothing is leaking and left behind. The Chrome Developer `performance` tab is the place to start detecting some anomalies. After you have spotted an issue, you can dig deeper into it with the `profiler` tab by taking snapshots and comparing them.

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🔥Handy Copy-Paste Javascript Snippets Part 1]]></title>
        <id>20220219132839-copy-paste-javascript-snippets</id>
        <link href="https://danfleser.com/posts/20220219132839-copy-paste-javascript-snippets"/>
        <updated>2022-02-19T13:28:39.882Z</updated>
        <summary type="html"><![CDATA[A list of useful code snippets for lazy developers.]]></summary>
        <content type="html"><![CDATA[
👉 Part 2 -> [🔥Handy Copy-Paste Javascript Snippets Part 2](http://danfleser.com/posts/20220220202431-copy-paste-javascript-snippets-2)
👉 Part 3 -> [🔥Handy Copy-Paste Javascript Snippets Part 3](http://danfleser.com/posts/20220220202610-copy-paste-javascript-snippets-3)

# Shuffle an Array

Shuffling an array is super easy with `sort` and `random` methods.

```js
const shuffleArray = (arr) => arr.sort(() => 0.5 - Math.random());
console.log(shuffleArray([1, 2, 3, 4]));
// Result: [ 1, 4, 3, 2 ]
```

# Check if Date is Valid

Use the following snippet to check if a given date is valid or not.

```js
const isDateValid = (...val) => !Number.isNaN(new Date(...val).valueOf());
isDateValid("December 17, 1995 03:24:00");
// Result: true
```

# Copy to Clipboard

Easily copy any text to clipboard using `navigator.clipboard.writeText`.

```js
const copyToClipboard = (text) => navigator.clipboard.writeText(text);
copyToClipboard("Hello World");
```

# Find the day of the year

Find which is the day by a given date.

```js
const dayOfYear = (date) =>
  Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);
dayOfYear(new Date());
// Result: 272
```

# Capitalize a String

Javascript doesn’t have an inbuilt capitalize function, so we can use the following code for this purpose.

```js
const capitalize = str => str.charAt(0).toUpperCase() + str.slice(1)capitalize("follow for more")
// Result: Follow for more
```

# Find the number of days between two days

Find the days between 2 given days using the following snippet.

```js
const dayDif = (date1, date2) => Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000)dayDif(new Date("2020-10-21"), new Date("2021-10-22"))
// Result: 366
```

# Clear All Cookies

You can easily clear all cookies stored on a web page by accessing the cookie using `document.cookie` and clearing it.

```js
const clearCookies = document.cookie.split(';').forEach(cookie => document.cookie = cookie.replace(/^ +/, '').replace(/=.\*/, \`=;expires=${new Date(0).toUTCString()};path=/\`));
```

# Generate Random Hex

You can generate random hex colors with `Math.random` and `padEnd` properties.

```js
const randomHex = () => \`#${Math.floor(Math.random() \* 0xffffff).toString(16).padEnd(6, "0")}\`;console.log(randomHex());
// Result: #92b008
```

# Remove Duplicated from Array

You can easily remove duplicates with `Set` in JavaScript. It's a lifesaver.

```js
const removeDuplicates = (arr) => [...new Set(arr)];
console.log(removeDuplicates([1, 2, 3, 3, 4, 4, 5, 5, 6]));
// Result: [ 1, 2, 3, 4, 5, 6 ]
```

# Get Query Params from URL

You can easily retrieve query params from a URL either bypassing `window.location` or the raw URL `goole.com?search=easy&page=3`

```js
const getParameters = (URL) => {
  URL = JSON.parse(
    '{"' +
      decodeURI(URL.split("?")[1])
        .replace(/"/g, '\\\\"')
        .replace(/&/g, '","')
        .replace(/=/g, '":"') +
      '"}'
  );
  return JSON.stringify(URL);
};
getParameters(window.location);
// Result: { search : "easy", page : 3 }
```

# Log Time from Date

We can log time, in the format `hour::minutes::seconds` from a given date.

```js
const timeFromDate = (date) => date.toTimeString().slice(0, 8);
console.log(timeFromDate(new Date(2021, 0, 10, 17, 30, 0)));
// Result: "17:30:00"
```

# Check if a number is even or odd

```js
const isEven = (num) => num % 2 === 0;
console.log(isEven(2));
// Result: True
```

# Find Average of Numbers

Find the average between multiple numbers using `reduce`method.

```js
const average = (...args) => args.reduce((a, b) => a + b) / args.length;
average(1, 2, 3, 4);
// Result: 2.5
```

# Check if the array is empty

A simple one-liner to check if an array is empty, will return `true`or `false`.

```js
const isNotEmpty = (arr) => Array.isArray(arr) && arr.length > 0;
isNotEmpty([1, 2, 3]);
// Result: true
```

# Get Selected Text

Get the text the user has selected using inbuilt `getSelection`property.

```js
const getSelectedText = () => window.getSelection().toString();
getSelectedText();
```

# Conclusion

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Only Signs To Be Aware Of When Starting A Programming Career]]></title>
        <id>20220219130405-signs-you-need-to-be-aware-of-when-starting-your-programming-career</id>
        <link href="https://danfleser.com/posts/20220219130405-signs-you-need-to-be-aware-of-when-starting-your-programming-career"/>
        <updated>2022-02-19T13:04:05.906Z</updated>
        <summary type="html"><![CDATA[A fundamental requirement for learning is an active interest in the thing you are learning. If you do not possess a mind that is curious about technology, you will not have the energy it takes to persist in learning the broad and deep knowledge required to be a successful programmer.]]></summary>
        <content type="html"><![CDATA[
> Programming is a basic human skill, just like reading, writing and arithmetic. Anyone can learn to program with time and effort.

# 1. Lack of curiosity

If you lack curiosity about computers and how technology works, you will never be successful as a programmer.

<iframe
  src="https://giphy.com/embed/QqdyVT8H6uJ32"
  width="100%"
  height="100%"
></iframe>

**Find Your Curiosity:** Ask yourself if programming truly interests you. If your honest answer is that it doesn’t, go find something that you are interested in. Save yourself the time and energy. But if your answer is “Yes”, then push yourself find something new that you haven’t noticed before, recognize the vast ocean and dive a little deeper.

# 2. Lack of autonomy and resourcefulness

If you don’t develop the ability to solve problems for yourself, you will never be successful as a programmer.

<iframe
  src="https://giphy.com/embed/11LK0CKzYtkaic"
  width="100%"
  height="100%"
></iframe>

In the world of development, all the information you need is found in that magical place formerly known as the _Information Super Highway_. This massive library has one huge doorway: [Google](https://www.google.com).

Check this article [7 Tricks To Master the Art of Googling](http://danfleser.com/posts/20220212095550-master-the-art-of-googling) to unlock TOP SECRET ancient googling skills that the masters of the universe have used.

**Use the Resources:** Recognize that all the answers you need really are out there. When you have a question, force yourself to google it before asking someone else for the answer and check the documentation. Save the time of others for when you have tried and truly failed to find the answer you need.

# 3. Lack of persistence in the face of a problem

If you give up easily in the face of problems, you will never be successful as a programmer.

<iframe
  src="https://giphy.com/embed/5Gq4gdBB0GBGOfM0P4"
  width="100%"
  height="100%"
></iframe>

**Patient Acceptance:** You need to recognize that problems come with the territory and are not problems, but in fact challenges. Every challenge you face and overcome gives you deeper understanding and a better ability to face new challenges, and quickly resolve old ones.

# 4. No feeling of success in overcoming a problem

If you don’t feel a sense of excitement and accomplishment after solving a problem, you will never be successful as a programmer.

<iframe
  src="https://giphy.com/embed/o75ajIFH0QnQC3nCeD"
  width="100%"
  height="100%"
></iframe>

**Celebrate Your Wins:** Whenever you solve a problem that you struggled with, no matter how small, always take pride in your accomplishment, take a break and congratulate yourself for a job well done. Let the feeling of success sink in and energize you for the next problem you face.

# 5. Impatient about learning and understanding

If you are impatient about learning and expect to master everything quickly and effortlessly, you will never truly be successful at programming.

<iframe
  src="https://giphy.com/embed/bPCwGUF2sKjyE"
  width="100%"
  height="100%"
></iframe>

**Acknowledge Your Progress:** There is a lot to learn, and the journey of programming never ends. But the knowledge is cumulative, so take pride it what you do know, and trust that every effort you take in your learning will create a strong foundation of knowledge for wherever your career takes you.

# 6. Getting bored/tired from thinking

If you are lazy in your thinking and see concentrated, focused thinking as a chore, you will never truly be successful at programming.

<iframe
  src="https://giphy.com/embed/F3BeiZNq6VbDwyxzxF"
  width="100%"
  height="100%"
></iframe>

**Your Mind is a Muscle:** Trust that your brain is like a muscle — as you use it, it gets better and more efficient in it’s thinking. As you put pieces together and develop mental concepts, it becomes much easier to discover solutions.

# 7. Inability to think for yourself

If you expect others to think for you, and are unwilling to look at the details of your own situation, you will never be a truly successful programmer.

<iframe
  src="https://giphy.com/embed/YaSkjOhf16wseqPFkH"
  width="100%"
  height="100%"
></iframe>

**Think for yourself:** Through your experience and critical thinking skills, develop your own perspectives. Make reasonable guesses, take a position, and be willing to change as new information comes to light.

# 8. Rigid, narrow and/or disorganized thinking

If you are rigid in your thinking, and you have difficulty keeping your code organized — and by extension your thoughts organized and focused, you will never be successful at programming.

<iframe
  src="https://giphy.com/embed/d3mlE7uhX8KFgEmY"
  width="100%"
  height="100%"
></iframe>

**Self Reflection:** You need to take a step back, and look at the bigger picture of how you are approaching things. How can you do this better? Is there anything you can do to make your life easier? What are you missing that could help you?

# 9. Needing the “right” answer instead of recognizing a spectrum of “good” and “bad” answers

If you see the end goal of programming as finding the right solution, rather than a spectrum of solutions, you will never truly be successful as a programmer.

<iframe
  src="https://giphy.com/embed/3oriNVcPynBHr0urUk"
  width="100%"
  height="100%"
></iframe>

**Get Creative:** Recognize that there are numerous ways to solve a problem, and through experience and exposure, you will develop a nuanced understanding overtime about which solutions feel better than others. Looking at the big picture, imagining different possibilities and trusting your gut will lead to better solutions that are more satisfying.

# 10. Not paying careful attention to details

If you gloss over details, and overlook little things, you will never be a truly successful programmer.

<iframe
  src="https://giphy.com/embed/BXOEmFSzNkOObZhIA3"
  width="100%"
  height="100%"
></iframe>

**Pay Attention to the Details:** The details matter and you have to accept that. Once you do, you can begin to always be scanning your code for anything that is out of place. You can organize your code and use tools that help you identify issues quickly.

# Conclusion

If you are interested in learning to program, I encourage you to begin the journey. Keep the above list in mind, and start exploring the many resources available online that can get you moving forward quickly. You won’t regret it.

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Every Full-Stack Developer Should Use This Tech Stack In 2022]]></title>
        <id>20220219124057-full-stack-dev-tech-stack-jump-start</id>
        <link href="https://danfleser.com/posts/20220219124057-full-stack-dev-tech-stack-jump-start"/>
        <updated>2022-02-19T12:40:57.665Z</updated>
        <summary type="html"><![CDATA[After having lots of interviews and reading through countless job descriptions on job boards I think this is a great modern tech stack for JavaScript developers in 2022. My framework of choice is React however you can swap it out for Vue, Angular or Svelte.]]></summary>
        <content type="html"><![CDATA[
# Project Management

<iframe
  src="https://giphy.com/embed/8xEA3sa0uxPuLFXaXA"
  width="100%"
  height="100%"
></iframe>

- [Notion](https://www.notion.so/) — For overall project management, documentation, notes and wikis
- [Clubhouse](https://clubhouse.io/) / [Monday](https://monday.com/) — Clubhouse or Monday to manage the development process itself. Both can be Incorporated into a CI/CD workflow so builds are done automatically and changes are reflected in the staging and production CI/CD branches
- [Discord](https://discord.com/) — For communication between teams

# Design

<iframe
  src="https://giphy.com/embed/sbxbdNiIKHFyo"
  width="100%"
  height="100%"
></iframe>

- [Figma](https://www.figma.com/) — Figma is a modern cross platform design tool with sharing and collaboration built in
- [Photoshop](https://www.photoshop.com/) / [Canva](https://www.canva.com/) — Photoshop is the industry standard for doing graphic design work and Canva is a great image editing tool

# Back-End

<iframe
  src="https://giphy.com/embed/WTO8QA0mX2Cfw5vhkp"
  width="100%"
  height="100%"
></iframe>

- [Node.js](https://nodejs.org/en/) — A popular modern back-end framework
- [PostgreSQL](https://www.postgresql.org/) — A popular SQL Database
- [MongoDB](https://www.mongodb.com/) — A popular NoSQL Database

# Front-End

<iframe
  src="https://giphy.com/embed/1RkDDoIVs3ntm"
  width="100%"
  height="100%"
></iframe>

- [NextJS](https://nextjs.org/) — NextJS for generating a static website
- [Tailwind](https://tailwindcss.com/) — Tailwind for writing the CSS, as its a modern popular framework basically allowing you to avoid writing your own custom CSS from scratch leading to faster development workflows
- [CSS/SASS](https://sass-lang.com/) / [styled-components](https://styled-components.com/) — This can be used as a different option to Tailwind, giving you more customization options for the components in React
- [Storybook](https://storybook.js.org/) — This is the main build process for creating the components because it allows for modularity. With Storybook components are created in isolation inside of a dynamic library that can be updated and shared across the business
- [Jest](https://jestjs.io/) and [Enzyme](https://enzymejs.github.io/enzyme/), [React Testing Library](https://testing-library.com/) and [Cypress](https://www.cypress.io/) — TDD using unit tests for the code and components before they are sent to production and Cypress for end to end testing
- [Sanity](https://www.sanity.io/) / [Strapi](https://strapi.io/) — Sanity and Strapi are headless CMS, and are used to publish the content with the use of a GUI (optional tools)
- [Vercel](https://vercel.com/) / [Netlify](https://www.netlify.com/) / [AWS](https://aws.amazon.com/) — The CI/CD provider combined with GitHub, it makes it easy to review and promote changes as they’re developed

# Mobile

<iframe
  src="https://giphy.com/embed/nmE8YkDIaB1OE"
  width="100%"
  height="100%"
></iframe>

- [Ionic](https://ionicframework.com/) — Cross-platform apps
- [React Native](https://reactnative.dev/) / [Redux](https://redux.js.org/) — React Native for creating cross platform mobile apps and Redux for state management
- [Flutter/Dart](https://flutter.dev/) — Flutter and Dart for creating cross platform mobile apps

# Final notes

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 15 Lightweight React Component Hooks Every Developer Needs Knows]]></title>
        <id>20220219121810-lightweight-react-component-hooks</id>
        <link href="https://danfleser.com/posts/20220219121810-lightweight-react-component-hooks"/>
        <updated>2022-02-19T12:18:10.952Z</updated>
        <summary type="html"><![CDATA[React hooks is the trending word in the React community. I hope every React developer knows what hooks are. In simple words, hooks give the advantage to use lifecycle methods in functional components and also encourages us to write functional components.]]></summary>
        <content type="html"><![CDATA[

**1\. useIdle**
===============

The useIdle hook tracks if the user on the page is idle. You can pass two params — `ms` is time to consider idle and `initialState`, which allows the user to set idle initially.

```jsx
import {useIdle} from 'react-use';

const Demo = () => {
  const isIdle = useIdle(3e3);

  return (
    <div>
      <div>User is idle: {isIdle ? 'Yes 😴' : 'Nope'}</div>
    </div>
  );
};
```

**2\. useInterval**
===============

This hook to use for interval-related functionalities. Which handles `clearInterval`on component unmount automatically. It also allows pausing the interval by setting the delay to null.
```jsx
import * as React from 'react';
import {useInterval} from 'react-use';

const Demo = () => {
  const [count, setCount] = React.useState(0);
  const [delay, setDelay] = React.useState(1000);
  const [isRunning, toggleIsRunning] = useBoolean(true);
  useInterval(
    () => {
      setCount(count + 1);
    },
    isRunning ? delay : null
  );

  return (
    <div>
      <div>
        delay: <input value={delay} onChange={event => setDelay(Number(event.target.value))} />
      </div>
      <h1>count: {count}</h1>
      <div>
        <button onClick={toggleIsRunning}>{isRunning ? 'stop' : 'start'}</button>
      </div>
    </div>
  );
};
```
**3\. useScroll**
=============

This hook is used to listen to the scroll event of the element and rerenders on scrolling. Not required to add the JavaScript event listeners manually.
```jsx
import {useScroll} from 'react-use';

const Demo = () => {
  const scrollRef = React.useRef(null);
  const {x, y} = useScroll(scrollRef);

  return (
    <div ref={scrollRef}>
      <div>x: {x}</div>
      <div>y: {y}</div>
    </div>
  );
};
```
**4\. useToggle**
=============

This hook is used to toggle between two states like TRUE, FALSE. This approach reduces the manual logic.
```jsx
import {useToggle} from 'react-use';

const Demo = () => {
  const [on, toggle] = useToggle(true);

  return (
    <div>
      <div>{on ? 'ON' : 'OFF'}</div>
      <button onClick={toggle}>Toggle</button>
      <button onClick={() => toggle(true)}>set ON</button>
      <button onClick={() => toggle(false)}>set OFF</button>
    </div>
  );
};
```
**5\. useTitle**
================

This hook is used to set the page title.
```jsx
import {useTitle} from 'react-use';

const Demo = () => {
  useTitle('Hello world!');return null;
};
```
**6\. usePrevious**
===============

This hook is used to get the previous state. We might not require to write custom logic to get the previous state.
```jsx
import {usePrevious} from 'react-use';

const Demo = () => {
  const [count, setCount] = React.useState(0);

  const prevCount = usePrevious(count);return (
    <p>
      <button onClick={() => setCount(count + 1)}>+</button>
      <button onClick={() => setCount(count - 1)}>-</button>
      <p>
        Now: {count}, before: {prevCount}
      </p>
    </p>
  );
};
```
**7\. useSetState**
===================

This hook is used to merge objects into their current state, similar to the `this.setState`in the class component. If you are using multiple states, it can be brought down to a single object state using `useSetState`
```jsx
import {useSetState} from 'react-use';

const Demo = () => {
  const [state, setState] = useSetState({});

  return (
    <div>
      <pre>{JSON.stringify(state, null, 2)}</pre>
      <button onClick={() => setState({hello: 'world'})}>hello</button>
      <button onClick={() => setState({foo: 'bar'})}>foo</button>
      <button
        onClick={() => {
          setState((prevState) => ({
            count: (prevState.count || 0) + 1,
          }))
        }}
      >
        count
      </button>
    </div>
  );
};
```
**8\. useCookie**
=============

This hook is used to return the current value of a `cookie`, a callback to update the `cookie` and a callback to delete the `cookie.`
```jsx
import { useCookie } from "react-use";

const Demo = () => {
  const [value, updateCookie, deleteCookie] = useCookie("my-cookie");
  const [counter, setCounter] = useState(1);useEffect(() => {
    deleteCookie();
  }, []);
  const updateCookieHandler = () => {
    updateCookie(`my-awesome-cookie-${counter}`);
    setCounter(c => c + 1);
  };

  return (
    <div>
      <p>Value: {value}</p>
      <button onClick={updateCookieHandler}>Update Cookie</button>
      <br />
      <button onClick={deleteCookie}>Delete Cookie</button>
    </div>
  );
};
```
**9\. usePermission**
=================

This hook is used to get the permission status of the browser API. Pass the API name to get the permission status.
```jsx
import {usePermission} from 'react-use';

const Demo = () => {
  const state = usePermission({ name: 'microphone' });return (
    <pre>
      {JSON.stringify(state, null, 2)}
    </pre>
  );
};
```
**10\. useDebounce**
================

This hook is used to delay the event until the wait time is completed. In the below code, the setState is performed after the wait time is completed.
```jsx
const Demo = () => {
  const [state, setState] = React.useState('Typing stopped');
  const [val, setVal] = React.useState('');
  const [debouncedValue, setDebouncedValue] = React.useState('');
  const [cancel] = useDebounce(
    () => {
      setState('Typing stopped');
      setDebouncedValue(val);
    },
    2000, [val]
  );

  return (
    <div>
      <input
        type="text"
        value={val}
        placeholder="Debounced input"
        onChange={({ currentTarget }) => {
          setState('Waiting for typing to stop...');
          setVal(currentTarget.value);
        }}
      />
      <div>{state}</div>
      <div>
        Debounced value: {debouncedValue}
        <button onClick={cancel}>Cancel debounce</button>
      </div>
    </div>
  );
};
```
**11\. useGeolocation**
===================

This hook is used to get the user geolocation. useGeolocation returns latitude, longitude, altitude, and more info.
```jsx
import {useGeolocation} from 'react-use';

const Demo = () => {
  const state = useGeolocation();return (
    <pre>
      {JSON.stringify(state, null, 2)}
    </pre>
  );
};
```
**12\. useNetworkState**
====================

This hook is used to get the network status of the browser. useNetworkState can be used the show the connection status to the user.
```jsx
import {useNetworkState} from 'react-use';

const Demo = () => {
  const state = useNetworkState();return (
    <pre>
      {JSON.stringify(state, null, 2)}
    </pre>
  );
};
```
**13\. useCopyToClipboard**
=======================

useCopyToClipboard hook is used to copy the text to the clipboard.
```jsx
const Demo = () => {
  const [text, setText] = React.useState('');
  const [state, copyToClipboard] = useCopyToClipboard();

  return (
    <div>
      <input value={text} onChange={e => setText(e.target.value)} />
      <button type="button" onClick={() => copyToClipboard(text)}>copy text</button>
      {state.error
        ? <p>Unable to copy value: {state.error.message}</p>
        : state.value && <p>Copied {state.value}</p>}
    </div>
  )
}
```
**14\. useFavicon**
===============

The useFavicon hook is used to set the favicon of the page.
```jsx
import {useFavicon} from 'react-use';

const Demo = () => {
  useFavicon('[https://cdn.sstatic.net/Sites/stackoverflow/img/favicon.ico'](https://cdn.sstatic.net/Sites/stackoverflow/img/favicon.ico'));return null;
};
```
**15\. useError**
=============

useError hook is used to dispatch errors.
```jsx
import { useError } from 'react-use';

const Demo = () => {
  const dispatchError = useError();const clickHandler = () => {
    dispatchError(new Error('Some error!'));
  };

  return <button onClick={clickHandler}>Click me to throw</button>;
};// In parent app

const App = () => (
  <ErrorBoundary>
    <Demo />
  </ErrorBoundary>
);
```

# Final notes

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[10 GitHub Repositories Every Self-Taught Developer Needs]]></title>
        <id>20220219112826-10-self-taught-dev-repos</id>
        <link href="https://danfleser.com/posts/20220219112826-10-self-taught-dev-repos"/>
        <updated>2022-02-19T11:28:26.714Z</updated>
        <summary type="html"><![CDATA[Indeed, every developer is, to a certain degree, self-taught. However, my way of looking at being a self-taught developer is to be able to write production-level code while having a minimal/no college background in computer science, engineering, or IT (much like myself).]]></summary>
        <content type="html"><![CDATA[
<iframe
  src="https://giphy.com/embed/cnhpl4IeYgU7MCBdV2"
  width="100%"
  height="100%"
></iframe>

Start with this in mind:

> “Many people who excel are self-taught” — Herb Ritts

# 1\. [🔧 roadmap.sh](https://roadmap.sh/)

**⭐️⭐️⭐️ — 187k**

The three suggested paths covered in this repository are:

- Frontend developer
- Backend developer
- DevOps

The repository covers all the skills and technology required for each of these paths. It also provides a strategy to learn these skills in a structured manner.

# 2\. [🎓 Path to a free self-taught education in Computer Science!](https://github.com/ossu/computer-science)

**⭐️⭐️⭐️ — 108k**

This repository aims to create an open source curriculum for learning computer science. The repository covers the prerequisites, core, and advanced courses required to have a well-rounded understanding of the fundamentals of the field.

# 3\. [📚 List of awesome university courses for learning Computer Science!](https://github.com/prakhar1989/awesome-courses)

**⭐️⭐️⭐️ — 40k**

This repo focuses on CS courses offered by universities. The unique aspect of the material compiled in this repo is that all the courses have their materials (such as lecture notes, lecture videos, and assignments) freely available on the internet.

# 4\. [📖 A complete computer science study plan to become a software engineer.](https://github.com/jwasham/coding-interview-university)

**⭐️⭐️⭐️ — 210k**

The primary purpose of this repo was to create a study plan to transition from a software/web developer into a software engineer at a FAANG company.

The topics covered in the repo include:

- Daily plan
- Big-O notation
- Data structures and algorithms
- OOPs, design patterns, threads/processes, networking, testing
- Systems design
- Resume, tips for answering general questions, tips for asking questions of the interviewer

# 5\. [🌎 Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards.](https://github.com/donnemartin/system-design-primer)

**⭐️⭐️⭐️ — 163k**

One of the few fantastic resources available online for system design, this repo is extremely useful for developers who want to understand how to build scalable systems.

Helps you to prepare for systems design interviews at FAANG companies.

# 6\. [📚 Freely available programming books](https://github.com/EbookFoundation/free-programming-books)

**⭐️⭐️⭐️ — 222k**

Tis repository has a massive collection of free programming books useful for learning all sorts of technology.

# 7\. [🤓 Build your own](https://github.com/danistefanovic/build-your-own-x)

**⭐️⭐️⭐️ — 131k**

This repo is useful for developers in building their own versions of software architecture/frameworks. The types of software covered include:

- Augmented reality
- Blockchain/cryptocurrencies
- Databases
- Programming language
- Neural networks

# 8\. [🆓 A collective list of free APIs](https://github.com/public-apis/public-apis)

**⭐️⭐️⭐️ — 181k**

This repository is a collective list of freely available APIs that can be used for developing software applications.

The repository is indexed categorically and also contains information regarding authorization, HTTPS, and CORS.

# 9\. [🏠 Curated list of project-based tutorials](https://github.com/tuvtran/project-based-learning)

**⭐️⭐️⭐️ — 64k**

For the self-taught developer who loves to learn via creating projects, this repository is a gold mine. As the name suggests, this repository contains a list of programming languages and projects built with the respective language.

# 10\. [⚔️ A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools and more](https://github.com/trimstray/the-book-of-secret-knowledge)

**⭐️⭐️⭐️ — 44.5k**

> \*\* "Knowledge is powerful, be careful how you use it!"

This repository is a collection of various materials and tools that I use every day in my work. It contains a lot of useful information gathered in one piece. It is an invaluable source of knowledge for me that I often look back on.

# Final notes

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 4 Resources You Need when Starting to Code]]></title>
        <id>20220218192724-4-resources-to-use-when-starting-web-development</id>
        <link href="https://danfleser.com/posts/20220218192724-4-resources-to-use-when-starting-web-development"/>
        <updated>2022-02-18T19:27:24.000Z</updated>
        <summary type="html"><![CDATA[This article guides you through the jungle of technologies and resources. Want to learn how to code? , helping you go from no knowledge to building fast, interactive, modern websites. One of the trickiest challenges was choosing _what_ to learn and _where_ to learn it. There are so many languages, frameworks, and libraries - and lots of conflicting advice.]]></summary>
        <content type="html"><![CDATA[
# Part 1: HTML, CSS, and JavaScript

<iframe
  src="https://giphy.com/embed/fuJPZBIIqzbt1kAYVc"
  width="100%"
  height="100%"
></iframe>

# **HTML**

<iframe
  src="https://giphy.com/embed/l3vRfNA1p0rvhMSvS"
  width="100%"
  height="100%"
></iframe>

If you’ve never done any coding before, then HTML is a great place to start. It is the core building block of the Internet, and unlike most other languages, it gives learners immediate visual feedback on the code they are writing.

Start here:

- [freeCodeCamp](https://www.freecodecamp.org/)

Environment to practice

- [CodePen](https://codepen.io/)

# **CSS**

<iframe
  src="https://giphy.com/embed/yYSSBtDgbbRzq"
  width="100%"
  height="100%"
></iframe>

CSS is used to style the HTML.

Start here:

- [freeCodeCamp](https://www.freecodecamp.org/)
- [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)
- [Grid Guide](https://css-tricks.com/snippets/css/complete-guide-grid/)
- [CSS Grid Tutorial](https://cssgrid.io/)

Environment to practice

- [CodePen](https://codepen.io/)

Most of questions had been asked already by users on StackOverflow, so a quick Google search will solve your problems.

Check this article [7 Tricks To Master the Art of Googling](http://danfleser.com/posts/20220212095550-master-the-art-of-googling) to unlock TOP SECRET ancient googling skills that the masters of the universe have used.

# **JavaScript**

<img src="/images/20220218192724-javascript.png" alt="javascript meme girl" />

JavaScript is the programming language of the web.

Start here:

- [JavaScript course](https://www.freecodecamp.org/)
- [Codecademy](https://codecademy.com)
- [Flatiron School](https://flatironschool.com/free-courses/learn-javascript/)
- [https://codewars.com](https://codewars.com)
- [MDN website](https://developer.mozilla.org/en-US/)

Environment to practice:

- [CodePen](https://codepen.io/)

# Part 2: Other must-have parts of any developer’s toolkit

# **Git and GitHub**

Git is a “version-control system” and GitHub is the most popular cloud-based Git service.

<iframe
  src="https://giphy.com/embed/kH6CqYiquZawmU1HI6"
  width="100%"
  height="100%"
></iframe>

Git allows you to backup your files, keep track of changes, share your progress with other developers, and work on collaborative projects.

Start here:

- [Codecademy’s Git Tutorial](https://www.codecademy.com/learn/learn-git)

# **The Command Line**

The best way to use Git is via the “terminal” or “command line”, and this is also essential for modern web developers, allowing you to easily add 3rd party packages to your websites via [NPM](https://www.npmjs.com/) (Node Package Manager) or [Yarn](https://yarnpkg.com/en/).

<iframe
  src="https://giphy.com/embed/hrRvYhBjYcExaRdMuB"
  width="100%"
  height="100%"
></iframe>

Start here:

- [Codecademy](https://www.codecademy.com/courses/learn-the-command-line/)

# Part 3: Building your skill set

# **Sass**

Sass is a CSS pre-processor. It takes basic CSS, and adds several new functionalities that make it better, easier to write, and easier to maintain. It’s also very easy to learn.

<img src="/images/20220218192724-scss.jpg" alt="css scss meme bear" />

Start here:

- [sass-lang.com](https://sass-lang.com/guide)

# **Bootstrap**

Bootstrap is a component library, developed by Twitter. It allows developers to build prototypes _very_ quickly. Instead of custom coding that slider, or navbar, or accordion, Bootstrap can help you deploy one in seconds.

Start here:

- [Bootstrap examples](https://getbootstrap.com/docs/5.1/examples/)

# **React**

<img src="/images/20220218192724-react.png" alt="reactjs image" />

There are several modern JavaScript libraries out there, including Ember, React, Vue, and Angular. There’s no single right choice here, but after doing some research I chose to focus on React.

Of all these libraries and frameworks, React appears to be the most popular and fastest growing. It was developed by Facebook, and its approach to DOM manipulation also gives it an advantage over Angular.

Start here:

- [reactjs.org](https://reactjs.org/tutorial/tutorial.html)

# Part 4: Use your brain

Just start and don't let a day pass without learning something.

# Final notes

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**

Background music:

<iframe
  width="100%"
  height="100%"
  src="https://www.youtube-nocookie.com/embed/-emXZU-4NLA?autoplay=1"
  title="Prokofiev: Romeo and Juliet, Op. 64 / Act 1 - 13. Dance Of The Knights"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
></iframe>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 4 ES2022 Features You Should Know About]]></title>
        <id>20220218185832-es2022</id>
        <link href="https://danfleser.com/posts/20220218185832-es2022"/>
        <updated>2022-02-18T18:58:32.960Z</updated>
        <summary type="html"><![CDATA[ECMAScript 2022 is a new JavaScript standard that is going to be released in June 2022. Let’s overview the most important changes.]]></summary>
        <content type="html"><![CDATA[
# 1\. Method at() in arrays

Finally! ES2022 will give us a possibility to index array-like objects from the end. That’s a tiny feature, but it improves core readability when dealing with `arrays` or `strings`.

`At()` method with positive number will work the same as indexing by `[]` , but with negative will allow accessing values from the end.

Instead of writing:

```js
const arr = [1, 2, 3, 4];
arr[arr.length - 2]; // 3
arr.slice(-2)[0]; // 3

const str = "1234";
str[str.length - 2]; // '3'
str.slice(-2)[0]; // '3'
```

We would be able to write:

```js
const arr = [1, 2, 3, 4];
arr.at(-2); // 3

const str = "1234";
str.at(-2); // '3'
```

# 2\. Error cause

`.cause` property on the error object would allow us to specify which error caused the other error.

```js
try {
  doSomeComputationThatThrowAnError();
} catch (error) {
  throw new Error("I am the result of another error", { cause: error });
}
```

# 3\. Top-level await

- It allows to load modules dynamically

```js
const serviceName = await fetch(
  "https://example.com/what-service-should-i-use"
);
const service = await import(`/services/${serviceName}.js`);

// OR

const params = new URLSearchParams(location.search);
const theme = params.get("theme");
const stylingFunctions = await import(`/styling-functions-${theme}.js`);
```

- It allows to conditionally render modules

```js
const date = new Date();

if (date.getFullYear() === 2023) {
  await require("/special-code-for-2023-year.js");
}
```

# 4\. Private slots and methods

They are private properties of the classes. ES2022 will give us the possibility to create them and get an error when we try to access them outside of the class. The same goes for private methods.

JS team chose to give them `#` prefix.

Here is an example of private slots in action:

```js
class Human {
  #name = "John";

  setName(name) {
    this.#name = name;
  }
}

const human = new Human();
human.#name = "Amy"; // ERROR!
human.setName("Amy"); // OK
```

And private method:

```js
class Human {
  name = "John";

  constructor(name) {
    this.#setName("Amy"); // OK
  }

  #setName(name) {
    this.name = name;
  }
}

const human = new Human();
human.#setName("Amy"); // ERROR!
```

# Final notes

You can find all improvements [here](https://exploringjs.com/impatient-js/ch_new-javascript-features.html#new-in-es2022).

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🔥The Last Web 3.0 Terms You’ll Ever Need]]></title>
        <id>20220216211413-top-web-3-terms-for-devs</id>
        <link href="https://danfleser.com/posts/20220216211413-top-web-3-terms-for-devs"/>
        <updated>2022-02-16T21:14:13.837Z</updated>
        <summary type="html"><![CDATA[Web 3.0 is becoming a hot topic again after hyping around Metaverse. A new architecture of the internet is opening new opportunities, and knowing them, will give you the advantage to pick up some technologies upfront or even inspire you on your own project. The opportunities are limitless and reshape all the industries.]]></summary>
        <content type="html"><![CDATA[
Attention! This may inspire you to create a million dollar idea. 😜

Hey crypto punks, **Web 3.0** is becoming a hot topic again after hyping around **Metaverse**. A new architecture of the internet is opening new opportunities, and knowing them, will give you the advantage to pick up some technologies upfront or even inspire you on your own project. The opportunities are limitless and reshape all the industries.

<img
  src="/images/20220216211413-metaverse-meme.jpg"
  alt="Metaverse meme zuckerberg"
/>

# Glossary

[**Metaverse**](https://www.usatoday.com/story/tech/2021/11/10/metaverse-what-is-it-explained-facebook-microsoft-meta-vr/6337635001/) —is a network of 3D virtual worlds where people avatars can interact with digital objects and with other people.

[**Blockchain**](https://www.investopedia.com/terms/b/blockchain.asp) — decentralized ledger, that stores data across a network of computers (called **nodes**). The data is split into **blocks** that are linked using cryptography. When new data is pushed into the blockchain, it fills an empty block that is further linked to other blocks, creating a chronological order chain. The data in the blockchain is not revertable, it is stored forever, and anyone can view it.

[**Cryptocurrency**](https://www.investopedia.com/terms/c/cryptocurrency.asp) (“**crypto**”) — a decentralized digital currency, created using cryptographic techniques. Crypto is decentralized, which means, it is independent of a monetary authority like banks and government. Everyone can issue the cryptocurrency (**mine**), buy, sell or trade without limits and control. Transactions are secure and much faster than traditional currency.

[**Crypto Wallet**](https://www.coinbase.com/learn/crypto-basics/what-is-a-crypto-wallet) — software or device for storing cryptocurrency and making **crypto** transactions.

[**Metamask**](https://metamask.io/) — popular browser extension and mobile app. It acts as a crypto wallet and gateway to **blockchain** apps.

[**Miner**](https://www.investopedia.com/tech/how-does-bitcoin-mining-work/) (cryptocurrency) — **nodes** in the **blockchain**. Each of the miners is guessing a 64-digit hexadecimal number, a **token,** that is generated during the transaction (inserting a new record into the blockchain). At the same time, miners are verifying the transactions: checking the source, checking a double-spending of the money, checking if transaction volume is within the allowed range. Miners are rewarded with crypto for verifying the block of transactions that were added to the **blockchain**.

[**Gas Fee**](<https://ethereum.org/en/developers/docs/gas/#:~:text=Gas%20refers%20to%20the%20fee,a%20transaction%20on%20Ethereum%20successfully.&text=Gas%20fees%20are%20paid%20in,(10%2D9%20ETH).>) — the amount of cryptocurrency that users pay miners in order to include their transactions into the **blockchain**.

[**Token**](https://www.investopedia.com/terms/c/crypto-token.asp#:~:text=What%20is%20a%20crypto%20token,for%20investment%20or%20economic%20purposes.) — is usually a random string or a number. In cryptocurrency, it can have different meanings:

- token — any cryptocurrency, but not Bitcoin and Ethereum (they usually called **coins**, but technically, they are tokens too);
- token — a cryptocurrency that uses other cryptocurrency’s infrastructure (blockchain). The token can become a coin if it has its own blockchain;
- token — can be a representation of digital asset (**NFT**);

[**NFT**](https://www.investopedia.com/terms/s/smart-contracts.asp) — or Nonfungible token — is a unique token stored in a **blockchain** that represents digital assets, like music, image, art, 3d models. Nonfungible means unique and non-interchangeable.

[**Smart contract**](https://www.investopedia.com/terms/s/smart-contracts.asp) — a decentralized program that is stored in **blockchain**, and called when participants satisfy preconditions. It is similar to a vendor machine. It executes when the buyer inserted the card to pay. It allows you to choose the drink, and after a drink is released, transfers money to the seller. **Automated**, **safe**, and **fast**. A **smart contract** could be any service: money transfer, voting during elections, changing property owner, basically, anything that requires human in between.

[**ICO**](https://www.investopedia.com/terms/i/initial-coin-offering-ico.asp) — Initial Coin Offering, similar to IPO (Initial Public Offering) — is an organization that allows you to raise the funds for products and services based on cryptocurrency.

[**DApp**](https://ethereum.org/en/dapps/) — Decentralized application — are software applications that run inside a **blockchain** network. **DApps** run on a decentralized environment, is public and open-source, doesn’t have a single authority.

[**DeFi**](https://www.investopedia.com/decentralized-finance-defi-5113835) — **decentralized finance** service resided in **blockchain**, which substitutes all the services that banks can provide.

[**DAO**](https://ethereum.org/en/dao/) — Decentralized Autonomous Organization — is an open-source platform running on a blockchain network that allows users, collectively manage the code. The rules are built in the code and enforced through **smart contracts**. In order to vote for proposals, users have to own and lock cryptocurrency into a voting contract. The voting weight is proportional to the amount of cryptocurrency locked. The proposal is finalized after achieving the network **consensus** rule and voters are rewarded with cryptocurrency.

[**Consensus**](https://decrypt.co/resources/consensus-protocols-what-are-they-guide-how-to-explainer) — a set of rules in a blockchain system that has to be verified in order to achieve the agreement on a single data value or a single state of the network.

[**Ethereum**](https://ethereum.org/en/) — an open-source software platform that works in the public blockchain networks and focuses on running **DApps** applications. It also has its own **cryptocurrency** for making payments inside the network, called **Ether**.

[**EVM**](https://ethereum.org/en/developers/docs/evm/) — Ethereum Virtual Machine — runtime environment for executing **smart contracts** in **Ethereum** blockchain. Allows a secure way of running programs that spread between machines around the world.

[**Solidity**](https://docs.soliditylang.org/en/v0.8.11/) — a programming language for writing **smart contracts** in blockchain, such as **Ethereum**. The program has to be compiled in **Ethereum Virtual Machine**.

[**Solana**](https://solana.com/) — a blockchain that solves the major problems of scalability, transaction speed, and price, energy efficiency. It is open-source that encourages to develop the **DApps**.

> ** Don’t forget to clap 👏 in the comment section below if you learned something new**
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tips for a Killer Resume in 2022]]></title>
        <id>20220216194128-killer-job-resume-2022</id>
        <link href="https://danfleser.com/posts/20220216194128-killer-job-resume-2022"/>
        <updated>2022-02-16T19:41:28.183Z</updated>
        <summary type="html"><![CDATA[Most people think that you need a diploma from Harvard or universities alike to be considered for a job in big tech companies. Although that may be partially true, not always though, it seems Apple and Google no longer require you to have a college degree.]]></summary>
        <content type="html"><![CDATA[
Most people think that you need a diploma from Harvard or universities alike to be considered for a job in big tech companies. Although that may be partially true ([not always though, it seems Apple and Google no longer require you to have a college degree](https://www.cnbc.com/2018/08/16/15-companies-that-no-longer-require-employees-to-have-a-college-degree.html)).

There are CEOs out there looking for loyal people who know how to take orders without questioning, and are ready to do the work, day in and day out, because they need the paycheck at the end of the month.

# General tips

# 1. Make yourself relevant

Before sending your resume, always go through the job description a couple of times and try to understand what is relevant to the job you are applying for.

# 2. Never send a generic CV

You’ll look like “_just the next boring applicant in the list,_” and your chances of getting hired will be significantly reduced.

# 3. Speak to the point

- you need to present only the relevant stuff, the big picture, don’t get caught in details
- cut off the noise, don’t tell the client small details unless they ask for them
- just tell that the work is going well
- if there are some problems, mention them

# 4. Have a good Linkedin profile

# 5. Be Confident

You can inspire from mine: https://www.linkedin.com/in/danfleser/

# What should you list on your resume?

# 1. Have a CV picture, with white background

<img
  src="/images/20220216194128-linkedin-card.png"
  alt="Linkedin profile picture"
/>

# 2. Add clear information in About section

```txt
About

I am a web developer with 8+ years of experience focused on working with the latest technologies in the field, helping companies around the world design and implement top-of-the-line scalable enterprise solutions.

My key skills:
Software Architecture
• Distributed systems, Microservices
• Domain-Driven-Design, DRY, YAGNI, Layered Architecture
• SOLID Principles, Clean code
• Unit testing
Leadership:
• Excellent problem-solving abilities
• Communication, Pair Programming
Back-end:
• NodeJS, Python
• Sql, NoSql, Database Architecture
• Docker
Front-end:
• Modern Javascript, Typescript, Modular Components
• Angular, Tailwind, Bootstrap, Unity

Is there any way my expertise can make an impact on your business? Drop me a message and let's have a chat!

Only interested in remote work.

📞 Phone: +(XX) XXX XXX XXX
📬 Email: XXX@XXX.XXX
💻 Github: https://github.com/XXX
```

# 3. Add jobs section with good descriptions

Present achievements. An achievement worth 1000 words.

Here are some good examples.

Example 1:

```txt
Senior Web Developer
Contract
Jul 2021 - Present · 8 mos
Paris, Île-de-France, France

CONSTRUCTION MONITORING SOLUTION

The client, a worldwide leader in the Construction Monitoring industry, managing large amounts of data by millimeter precision, had to automate and orchestrate multiple types of construction sites.

✅ Drastically reduced the development time by 60%-70% by migrating the baseline code to a generic system that can allow unlimited types of construction worksites to be added into the web app.
✅ Reduced the overall software deployment time by 40% introducing a microservice architecture wrapped in Docker containers orchestrated using Kubernetes.
✅ Ensured 100% code quality by integrating multiple validation scripts before any developer does some changed to the baseline code.
✅ Kept users happy by constantly developing new app features and delivering them on time.


Skills: Layered Architecture, Clean Architecture, Pair programming, Modular Components, Microservices, Typescript, Angular, NestJs, MongoDB, Docker, Kubernetes, Angular Material, Domain-Driven Driven Design (DDD), SOLID, DRY, YAGNI.
```

Example 2:

```txt
Full Stack Developer
Full-time
Jul 2019 - Jul 2021 · 2 yrs 1 mo
Washington, United States

CYBER RISK QUANTIFICATION WEB APPLICATION

The client, a worldwide leader in the Cyber Risk Quantification industry, managing large amounts of data, had to automate and orchestrate risk quantification from days to hours by automating manual processes.

✅ Reduced the overall software development time and increased productivity by 15% by introducing a layered architecture to decouple the business model from the infrastructure code.
✅ Ensured 100% app usage transparency by integrating means of user interaction analytics, by contributing to both front-end and back-end from a full-stack role.
✅ Kept users happy by decreasing the page load times, while delivering new features on time.
✅ Reduced the time to generate statistics and logs up to 50% by implementing an intuitive web app with a high-quality user experience and great overall performance custom-tailored to the client’s needs.

Skills: Layered Architecture, Clean Architecture, Pair programming, Modular Components, Microservices, Typescript, Angular, .NET Core, Entity Framework, PostgreSQL, Bootstrap, Domain-Driven Driven Design (DDD), SOLID, DRY, YAGNI.
```

Example 3:

```txt
Senior Web Developer
Freelance
Jul 2020 - Dec 2020 · 6 mos
Los Angeles, California, United States

E-COMMERCE WEBSITES

The clients, dropshipping stores, involved in the e-commerce business, had to update their website user interfaces to match mobile devices, improve search engine optimization, and grow revenue.

✅ Increased the conversion rate by avg. 4%, the user retention increased by avg. 7%, the average order value by avg. 14%, the total revenue of the company by avg. 31% and drastically increase the number of orders on mobile devices by avg. 80%, by designing and implementing a mobile-friendly user interface and ensuring a great overall user experience.
✅ Drastically reduced page loading time from +5 seconds to 2.1 seconds, by providing a stable behavior of the web app while testing, and fixing 100% of the issues.
✅ Reached over avg. 100K unique visitors and almost avg. 200K page views in the first 8 months by designing a rock-solid user interface.
✅ Ensured 100% transparency by applying SCRUM and constantly receiving feedback from the product owner.

Skills: Shopify API, JavaScript, jQuery, HTML5, CSS3, Bootstrap, CDN.
```

Example 4:

```txt
Senior Web Developer
Aug 2018 - Jul 2019 · 1 yr
London, England, United Kingdom

AML COMPLIANCE SCREENING WEB APPLICATION

The client, a worldwide leader in the AML Compliance industry, managing large amounts of data, had to speed up customer onboarding cycle time and grow revenue by automating manual processes and minimize false-positives.

✅ Skyrocketed annual revenue by increasing user satisfaction and productivity, by designing a user interface that highlights AML data matching and monitoring.
✅ Achieved 100% data accuracy, with a 40% improvement in screening and monitoring data operations, drastically reduced page loads from 5-7 seconds to 2-3 seconds, by making the web application more consistent and user-friendly, while keeping a very stable & reliable solution for the end-user.
✅ Achieved colossal time savings, from hours to minutes, with a 99.9999% efficiency increase in reports exporting, by designing a custom fined tuned system exposed through the web application.
✅ Skyrocketed the communication in task management planning and grooming sessions with 100% commitment, by improving the technical culture through numerous tech meetings and hackathons.

Skills: Domain-Driven Driven Design (DDD), SOLID, DRY, YAGNI, Layered Architecture, Clean Architecture, Pair Programming, Modular Components, Microservices, Typescript, Angular.js, Lazy Load, Web Worker, Caching, Gzip.
```

Example 5:

```txt
Web Developer
Full-time
Jul 2017 - Aug 2018 · 1 yr 2 mos
California, United States

EPIDEMIC TRACKER WEB APPLICATION

The client, a worldwide software leader in the epidemics business industry, managing large amounts of data, had to optimize the web application because the legacy code was hard to maintain. Performance needed to be improved fast, for delivering actionable, data-driven insights about global epidemics.

✅ Drastically reduced the time spent in application from 3h to 5min, skyrocketed application performance by 70%, by designing an intuitive eye-popping mobile-friendly UI with increased usability using a clean architecture after an in-depth analysis of the existing code and infrastructure.
✅ Reduced the employment cost by 30% by automating more than half of the manual statistical work for selecting and rendering only relevant information.
✅ Reduced errors in the development phase by 98% by introducing unit and integration tests.

Skills: Clean Code, Modular Components, In-House Styles Library, Angular.js, NVD3, Bootstrap, Jasmine, Protractor.
```

Example 6:

```txt
Full-stack Developer
Nov 2015 - Nov 2017 · 2 yrs 1 mo
Bucharest, Romania

REPORTS AND STATISTICS HEALTHCARE MEDICAL SERVICE

The client, an important software company that provides medical software for public Romanian hospitals, had an outdated desktop application, unscalable with poor optimization, long response times, and unintuitive user interface, resulting in unhappy clients.

✅ Successfully meet the client’s requirements, by creating a new web application with clean architecture, decoupled components that meet the client requirements lowering time spent in the application by an astounding 70% by showing the users only the most relevant data while maintaining a highly efficient communication line with the clients.
✅ Ensured a rock-solid infrastructure to handle over 4M users by designing resilience microservices and performing stress testing. Delivered a scalable solution ready for a 4M daily active users deploy.

Skills: Clean Code, Microservices, Modular Components, In-House Libraries, Angular, Angular Material, C3.js, Node.js, Koa.js, MongoDB, OAuth 2, FHIR Standard, Git, Jenkins, Redmine.
```

# 4. Add education section(if applicable)

<img
  src="/images/20220216194128-education-card.png"
  alt="Linkedin education section"
/>

# 5. Add licenses & certifications section(if applicable)

<img
  src="/images/20220216194128-certificate-card.png"
  alt="Linkedin licenses & certifications section"
/>

# Final thoughts

Having a solid foundation in at least two languages will increase your job opportunities by 2X.

Coders can make somewhere from $80,000/yr to $1.200,000/yr([Roblox](https://roblox.com)) and even more depending on their job title and the company they work for.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[YouTube Channels for Programming Skills]]></title>
        <id>20220216193455-youtube-channels-for-programmers</id>
        <link href="https://danfleser.com/posts/20220216193455-youtube-channels-for-programmers"/>
        <updated>2022-02-16T19:34:55.112Z</updated>
        <summary type="html"><![CDATA[To make it in the software development world, you’ll need to dig up some creativity and inject it into your coding skills. The ability to think analytically is highly valued among developers as well.]]></summary>
        <content type="html"><![CDATA[
[Traversy Media](https://www.youtube.com/user/TechGuyWeb)

<img
  src="/images/20220216193455/20220216193455-traversy-media.png"
  alt="Traversy Media Youtube channel"
/>

[Jason Weimann](https://www.youtube.com/c/Unity3dCollege)

<img
  src="/images/20220216193455/20220216193455-Unity3dCollege.png"
  alt="Jason Weimann Youtube channel"
/>

[DevEd](https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q)

<img
  src="/images/20220216193455/20220216193455-deved.png"
  alt="DevEd Youtube channel"
/>

[Ben Awad](https://www.youtube.com/user/99baddawg)

<img
  src="/images/20220216193455/20220216193455-benawad.png"
  alt="Ben Awad Youtube channel"
/>

[3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw)

<img
  src="/images/20220216193455/20220216193455-3Blue1Brown.png"
  alt="3Blue1Brown Youtube channel"
/>

[ThePrimeagen](https://www.youtube.com/channel/UC8ENHE5xdFSwx71u3fDH5Xw)

<img
  src="/images/20220216193455/20220216193455-ThePrimeagen.png"
  alt="ThePrimeagen Youtube channel"
/>

[Fun Fun Function](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q)

<img
  src="/images/20220216193455/20220216193455-fun-fun-function.png"
  alt="Fun Fun Function Youtube channel"
/>

[Computerphile](https://www.youtube.com/user/Computerphile)

<img
  src="/images/20220216193455/20220216193455-Computerphile.png"
  alt="Computerphile Youtube channel"
/>

[ThinMatrix](https://www.youtube.com/user/ThinMatrix)

<img
  src="/images/20220216193455/20220216193455-ThinMatrix.png"
  alt="ThinMatrix Youtube channel"
/>

[Google Chrome Developers](https://www.youtube.com/user/ChromeDevelopers)

<img
  src="/images/20220216193455/20220216193455-google-chrome-developers.png"
  alt="Google Chrome Developers Youtube channel"
/>

[Gaurav Sen](https://www.youtube.com/channel/UCRPMAqdtSgd0Ipeef7iFsKw)

<img
  src="/images/20220216193455/20220216193455-Gaurav.png"
  alt="Gaurav Sen Youtube channel"
/>

[Jon Gjengset](https://www.youtube.com/channel/UC_iD0xppBwwsrM9DegC5cQQ)

<img
  src="/images/20220216193455/20220216193455-Gjengset.png"
  alt="Jon Gjengset Youtube channel"
/>

[Two Minute Papers](https://www.youtube.com/user/keeroyz)

<img
  src="/images/20220216193455/20220216193455-2-minute-paper.png"
  alt="Two Minute Papers Youtube channel"
/>

[Simple Programmer](https://www.youtube.com/channel/UCRxWW_Ncs308nW4An23Yeig)

<img
  src="/images/20220216193455/20220216193455-simple-programmer.png"
  alt="Simple Programmer Youtube channel"
/>

[The Coding Train](https://www.youtube.com/user/shiffman)

<img
  src="/images/20220216193455/20220216193455-coding-train.png"
  alt="The Coding Trai Youtube channel"
/>

[Academind](https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w)

<img
  src="/images/20220216193455/20220216193455-Academind.png"
  alt="Academind Youtube channel"
/>

[Derek Banas](https://www.youtube.com/user/derekbanas)

<img
  src="/images/20220216193455/20220216193455-derek-Banas.png"
  alt="Derek Banas Youtube channel"
/>

[Mark Lewis](https://www.youtube.com/user/DrMarkCLewis)

<img
  src="/images/20220216193455/20220216193455-Mark-Lewis.png"
  alt="Mark Lewis Youtube channel"
/>

[The Net Ninja](https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg)

<img
  src="/images/20220216193455/20220216193455-net-ninja.png"
  alt="The Net Ninja Youtube channel"
/>

# Conclusion

Let me know in the comments which one is your favorite.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Best Programming Jokes February 2022]]></title>
        <id>20220215200104-programmer-jokes-feb-2022</id>
        <link href="https://danfleser.com/posts/20220215200104-programmer-jokes-feb-2022"/>
        <updated>2022-02-15T20:01:04.612Z</updated>
        <summary type="html"><![CDATA[In this post, we have collected a handful of jokes, that have been floating around the Web, which showcase a programmer’s sense of humor. Don’t worry if you don’t get all of them — just get a programmer to explain it to you.]]></summary>
        <content type="html"><![CDATA[
# 0\. Idea of a Perfect Date

<img src="/images/20220215200104/1.jpeg" alt="Idea of a Perfect Date" />

# 1\. This website doesn’t use cookies

<img
  src="/images/20220215200104/2.jpeg"
  alt="This website doesn’t use cookies"
/>

# 2\. Behind the scenes

<img src="/images/20220215200104/3.jpeg" alt="Behind the scenes" />

# 3\. I don’t know what to do

<img src="/images/20220215200104/4.jpeg" alt="I don’t know what to do" />

# 4\. Finding a big problem while solving small ones

<img
  src="/images/20220215200104/5.jpeg"
  alt="Finding a big problem while solving small ones"
/>

# 5\. Maybe it doesn’t want to listen to me

<img
  src="/images/20220215200104/6.jpeg"
  alt="Maybe it doesn’t want to listen to me"
/>

# 6\. A serious crime

<img src="/images/20220215200104/7.jpeg" alt="A serious crime" />

# 7\. Oops! Something went wrong

<img src="/images/20220215200104/8.jpeg" alt="Oops! Something went wrong" />

# 8\. When you date a programmer

<img src="/images/20220215200104/9.jpeg" alt="When you date a programmer" />

# 9\. Blame Game

<img src="/images/20220215200104/10.jpeg" alt="Blame Game" />

# 10\. Every single time. Ctrl S Ctrl S

<img
  src="/images/20220215200104/11.jpeg"
  alt="Every single time. Ctrl S Ctrl S"
/>

# 11\. When you are serving notice period

<img
  src="/images/20220215200104/12.jpeg"
  alt="When you are serving notice period"
/>

# 12\. You gonna regret it later

<img src="/images/20220215200104/13.jpeg" alt="You gonna regret it later" />

# 13\. The ultimate excuse that works every time

<img
  src="/images/20220215200104/14.jpeg"
  alt="The ultimate excuse that works every time"
/>

# 14\. Strong security policy, seriously?

<img
  src="/images/20220215200104/15.jpeg"
  alt="Strong security policy, seriously?"
/>

# 15\. Hell for the developers

<img src="/images/20220215200104/16.jpeg" alt="Hell for the developers" />

# 16\. Oh No.

<img src="/images/20220215200104/17.jpeg" alt="Oh No." />

# 17\. What!?

<img src="/images/20220215200104/18.jpeg" alt="What!?" />

# 18\. Sending a Mail

<img src="/images/20220215200104/19.jpeg" alt="Sending a Mail" />

# 19\. An honest interview

<img src="/images/20220215200104/20.jpeg" alt="An honest interview" />

# 20\. Developer’s Life in a Nutshell

<img
  src="/images/20220215200104/21.jpeg"
  alt="Developer’s Life in a Nutshell"
/>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RabbitMQ vs Redis vs Kafka]]></title>
        <id>20220213171308-rabbitmq-redis-kafka</id>
        <link href="https://danfleser.com/posts/20220213171308-rabbitmq-redis-kafka"/>
        <updated>2022-02-13T17:13:08.664Z</updated>
        <summary type="html"><![CDATA[When using asynchronous communication for Microservices, it is common to use a message broker. A broker ensures communication between different microservices is reliable and stable, that the messages are managed and monitored within the system and that messages don’t get lost.]]></summary>
        <content type="html"><![CDATA[
# You should consider a few things:

- Broker Scale — The number of messages sent per second in the system.
- Data Persistency — The ability to recover messages.
- Consumer Capability — Whether the broker is capable of managing one-to-one and/or one-to-many consumers.

# RabbitMQ (AMQP)

- **Scale**: based on configuration and resources, the ballpark here is around 50K msg per second.
- **Persistency**: both persistent and transient messages are supported.
- **One-to-one** vs **one-to-many consumers**: both.

# Kafka

- **Scale**: can send up to a million messages per second.
- **Persistency**: yes.
- **One-to-one** vs **one-to-many consumers**: only one-to-many.

# Redis

- **Scale**: can send up to a million messages per second.
- **Persistency**: basically, no — it’s an in-memory datastore.
- **One-to-one** vs **one-to-many consumers**: both.

# Use Cases

- Short-lived Messages: Redis
- Large Amounts of Data: Kafka
- Complex Routing: RabbitMQ
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learn React JS in 7 minutes — Beginners Tutorial]]></title>
        <id>20220213165126-learn-react-in-5-min</id>
        <link href="https://danfleser.com/posts/20220213165126-learn-react-in-5-min"/>
        <updated>2022-02-13T16:51:26.666Z</updated>
        <summary type="html"><![CDATA[After reading this article, you should be able to start coding React apps given that you’re comfortable with Javascript.]]></summary>
        <content type="html"><![CDATA[
# Get you started with the popular JavaScript library in just a few minutes.

When getting started with React, you should use the simplest setup possible: an HTML file which imports the `React` and the `ReactDOM` libraries using script tags.

It looks like this:

```jsx
<html>
  <head>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">REACT_CODE</script>
  </body>
</html>
```

We’ve also imported Babel, as React uses something called JSX to write markup. We’ll need to transform the JSX into plain JavaScript, so that the browser can understand it.

There are more two things I want you to notice:

1.  The `<div>` with the id of `#root`. This is the entry point for our app. This is where our entire app will live.
2.  The `<script type="text/babel">` tag in the body. This is where we’ll write our React code.

# Components

Everything in React is a component, and these usually take the form of JavaScript classes. You create a component by extending upon the `React-Component` class. Let’s create a component called `Hello`:

```jsx
class Hello extends React.Component {
  render() {
    return <h1>Hello world!</h1>;
  }
}
```

You then define the methods for the component. In our example, we only have one method, and it’s called `render()`.

Inside `render()` you’ll return a description of what you want React to draw on the page. In the case above, we simply want it to display an `h1` tag with the text _Hello world!_ inside it.

To get our tiny application to render on the screen, we also have to use `ReactDOM.render()`:

```jsx
ReactDOM.render(<Hello />, document.getElementById("root"));
```

So this is where we connect our `Hello` component with the entry point for the app (`<div id="root"></div>`).

> _So we’re simply saying:_ Hey React! Please render the **Hello** component inside the DOM node with an id of **root**!

# Handling data

There are two types of data in React: **props** and **state**. The difference between the two is a bit tricky to understand in the beginning, so don’t worry if you find it a bit confusing. It’ll become easier once you start working with them.

The key difference is that the **state** is private and can be changed from within the component itself. **Props** are external, and not controlled by the component itself. It’s passed down from components higher up the hierarchy, who also control the data.

**A component can change its internal state directly. It can not change its props directly.**

Let’s take a closer look at props first.

# Props

Our `Hello` component is completely static. It renders out the same message no matter what. However, a big part of React is reusability, meaning the ability to write a component once, and then reuse it in different use cases. For example to display different messages.

To achieve this type of reusability, we’ll add props. This is how you pass props to a component:

```jsx
ReactDOM.render(
    <Hello **message="my friend"** />,
    document.getElementById("root")
);
```

This prop is called `message` and has the value “my friend”. We can access this prop inside the Hello component by referencing `this.props.message`, like this:

```jsx
class Hello extends React.Component {
    render() {
        return <h1>Hello {**this.props.message**}!</h1>;
    }
}
```

The reason we’re writing `{this.props.message}` with curly braces is because we need to tell the JSX that we want to add a JavaScript expression. This is called **escaping**_._

However, what if we want the component to be able to change its own data? Then we have to use state instead!

# State

Unlike props — which can’t be changed directly by the component — the state can.

So if you want the data in your app to change — for example based on user interactions — it must be stored in a component’s state somewhere in the app.

# Initializing state

To initialize the state, simply set `this.state` in the `constructor()` method of the class. Our state is an object which in our case only has one key called `message`.

```jsx
class Hello extends React.Component {
  constructor() {
    super();
    this.state = {
      message: "my friend (from state)!",
    };
  }

  render() {
    return <h1>Hello {this.state.message}!</h1>;
  }
}
```

Before we set the state, we have to call `super()` in the constructor. This is because `this` is uninitialized before `super()` has been called.

# Changing the state

To modify the state, simply call **this.setState(),** passing in the new state object as the argument. We’ll do this inside a method which we’ll call `updateMessage`.

```jsx
class Hello extends React.Component {

    constructor(){
        super();
        this.state = {
            message: "my friend (from state)!"
        };
        **this.updateMessage = this.updateMessage.bind(this);**   }    **updateMessage() {
        this.setState({
            message: "my friend (from changed state)!"
        });
    }**    render() {
        return <h1>Hello {this.state.message}!</h1>;
    }

}
```

> Note: To make this work, we also had to bind the `this` keyword to the `updateMessage` method. Otherwise we couldn’t have accessed `this` in the method.

# Event Handlers

The next step is to create a button to click on, so that we can trigger the `updateMessage()` method.

So let’s add a button to the `render()` method:

```jsx
render() {
    return (

    <div>
        <h1>Hello {this.state.message}!</h1>
        <button onClick={this.updateMessage}>Click me!</button>
    </div>
    )
}
```

Here, we’re hooking an event listener onto the button, listening for the **onClick** event. When this is triggered, we call the **updateMessage** method.

Here’s the entire component:

```jsx
class Hello extends React.Component {
  constructor() {
    super();
    this.state = {
      message: "my friend (from state)!",
    };
    this.updateMessage = this.updateMessage.bind(this);
  }

  updateMessage() {
    this.setState({
      message: "my friend (from changed state)!",
    });
  }

  render() {
    return (
      <div>
        <h1>Hello {this.state.message}!</h1>
        <button onClick={this.updateMessage}>Click me!</button>
      </div>
    );
  }
}
```

The **updateMessage** method then calls **this.setState()** which changes the `this.state.message` value.

Congrats! You now have a very basic understanding of the most important concepts in React.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7 Income Ideas For Programmers(That Actually Work)]]></title>
        <id>20220213130620-programmers-side-gigs</id>
        <link href="https://danfleser.com/posts/20220213130620-programmers-side-gigs"/>
        <updated>2022-02-13T13:06:20.118Z</updated>
        <summary type="html"><![CDATA[Earning $1,000 to $100,000 per month as a programmer, but requires effort, time, and maybe money to turn active to passive income.]]></summary>
        <content type="html"><![CDATA[
> “If you want to succeed, double your failure rate.”

# 1\. Freelancing

A strategy would be to work on your LinkedIn profile, contact recruiters and past clients from your network, go to conferences and meetups, and look out for platforms that match up remote workers with companies.

<img
  src="/images/20220213130620-work-from-home.png"
  alt="freelancing work from home"
/>

Take advantage of and leverage Facebook groups. There are dozens of Facebook groups that are designed specifically for freelancers.

- [Jobs for Front-End Developers](https://www.facebook.com/groups/556739801135588/)
- [Remote and Travel Jobs](https://www.facebook.com/groups/RemoteTravelJobs/)
- [Remote Jobs, Work Anywhere — Inventive Hub](https://www.facebook.com/groups/inventivehub/)
- [Guavabean Freelancer Group](https://www.facebook.com/groups/guavabean/)

There is no shortage of Facebook groups you can join and explore. Go ahead type “remote jobs” or “programming jobs” — or be creative about your search terms. You’ll be surprised at how many groups there are.

# 2\. Bounty Programs

Hunting for bugs, or what’s called _bug bounty hunting_, is the process of being paid to find vulnerabilities in software, websites, and web applications.

<img
  src="/images/20220213130620-bounty-hunt.png"
  alt="bug bounty hunting program"
/>

Some programmers make tens of thousands of dollars a year on side-hustling via bounty programs.

- [Google's Bug Hunting](https://bughunters.google.com/)
- [Facebook Bug Bounty Program](https://www.facebook.com/whitehat/hackerplus)
- [Fire Bounty](https://firebounty.com/)
- [Bugcrowd](https://www.bugcrowd.com/bug-bounty-list/)
- [Vulnerability Lab](https://www.vulnerability-lab.com/list-of-bug-bounty-programs.php)
- [HackerOne](https://hackerone.com/hacktivity?sort_type=popular&filter=type%3Aall&page=1&range=forever)

# 3\. Coding Contests

Below is a list in no particular order of websites you can start looking into to practice and participate in coding contests with monetary rewards. This way of making money online is not for everyone, and there is no guarantee you’ll win.

<img
  src="/images/20220213130620-coding-contest.png"
  alt="coding contests with monetary rewards"
/>

I would also recommend looking into hackathons that require you to build an application based on ideas. These tend to be less stressful compared to the algorithm-based, problem-solving coding contests. Project-based hackathons are always fun when done with friends as the experience is more engaging.

- [HackerEarth](https://www.hackerearth.com/)
- [Google Code Jam](https://codingcompetitions.withgoogle.com/codejam)
- [HackerRank](https://www.hackerrank.com/)
- [Topcoder](https://www.topcoder.com/)
- [Coderbyte](https://coderbyte.com/)
- [InterviewBit](https://www.interviewbit.com/)
- [Codeforces](https://codeforces.com/)
- [Sphere Online Judge](https://www.spoj.com/)
- [CodingBat](http://codingbat.com/java)
- [Codility](https://www.codility.com/)
- [Project Euler](https://projecteuler.net/)
- [CodeChef](https://www.codechef.com/)

# 4\. Become an Online Instructor

- Create a course, upload it to a marketplace, sit back and let the marketplace do all the marketing (the hands-free way).
- Create a course, host it yourself on a content management platform, and market it yourself.
- Conduct teaching sessions that foster face-to-face interactions with students. These could be one-on-one or in a group setting.

<img
  src="/images/20220213130620-youtube-content-creator.png"
  alt="digital content creator"
/>

The instructor business can be something that might take up a lot of your time initially. The process of creating courses, editing your content, and preparing lecture material and homework exercises can be quite a bit of a time investment. It could take you anywhere from one to three months' worth of work.

While course creation is great, something to keep in mind is that you have to pay your taxes.

<img src="/images/20220213130620-irs-meme.jpg" alt="pay your taxes IRS meme" />

Below are platforms you can start to look into to sell or teach online to generate some semi-passive revenue. Take note that most of these are open to everyone regardless of which country you come from. There's always PayPal and Payoneer to help facilitate your transferring your profits.

Available for everyone:

- [YouTube](http://www.youtube.com/) for publishing your own video coding tutorials. Revenue is generated through an ads program.
- [Udemy](https://mikkegoes.com/udemy) for creating and publishing your own online coding courses. The profit-sharing is high at 50% but Udemy brings to the table millions of students and an audience you can directly tap into when you hit the Publish button.
- [Skillshare](https://www.skillshare.com/teach) is also an alternative to Udemy.
- [Udacity](https://www.udacity.com/start-mentoring) is another alternative to Udemy.
- [BitDegree](https://www.bitdegree.org/) is a Udemy alternative for creating and publishing your own online coding courses.
- [Amazon Kindle Direct Publishing](https://kdp.amazon.com/) for creating and selling your own books
- Host courses on your own website

High end of the spectrum, invite based:

- [Frontend Masters](https://frontendmasters.com/)
- [LinkedIn Learning](https://www.linkedin.com/learning/?trk=lynda_redirect_learning)
- [Pluralsight](https://www.pluralsight.com/)

They are by invite only, but worth the time investment to get into as they have a large audience and some of the best instructors you can get to learn from.

Making consistent high-quality content is what will set you apart from the rest of the pack. Competition is high, and part of the game is marketing. The best instructors constantly update their courses to stay relevant and at the top of their game. The beauty of creating courses is that once you build traction, it’s an endless stream of passive income.

# 5\. YouTube Channel

YouTube still has massive potential for you as a programmer to make some pretty decent passive income through the YouTube Partner Program.

<img
  src="/images/20220213130620-youtube-content.png"
  alt="YouTube Channel massive potential"
/>

The barrier to entry is a bit high if you're trying to join the partner program, though. It requires that your channel have an aggregate total of 4,000 watched hours of video over 12 months and at least 1,000 subscribers, which is no small feat when you’re getting started and you’re a nobody.

There are alternative ways of generating value from your channel, even if they’re small, like blogging or article creation. You need to leverage this platform as a lead and audience generator.

To make some money, you need to build social proof, this requires you to provide valuable content for your YouTube channel.

# 6\. Build an App You Can Sell

Make your own piece of software in order to sell it. It’s no easy feat, but can be incredibly rewarding. One of the things we programmers suck at is understanding how to market our craft.

<img
  src="/images/20220213130620-build-app.png"
  alt="startup Build an App You Can Sell"
/>

You need to come up with a business plan and strategy of how to monetize your application.

Build a software product that the market needs or that helps other people solve their problems.The first steps are to find a problem and solve it with software. This can be as simple as walking down to your local store and having a conversation with the owners to see what pressing issues they’re struggling with, and then providing a solution.

# 7\. Make a Plugin or Theme for WordPress

The market may seem oversaturated, but think for a moment about the number of plugins or apps that haven't been built yet on WordPress. Or the number of restaurants and businesses opening up around your neighborhood that still do not have an online presence. To get started making money with your plugins, you can start posting to various online marketplaces, such as:

- WordPress.org
- Themeforest
- CodeCanyon
- TemplateMonster Marketplace
- Mojo Marketplace
- ThemeSnap
- Creative Market
- Codester

<img
  src="/images/20220213130620-plugin-blocks.png"
  alt="Make a Plugin or Theme for WordPress"
/>

You can choose to make your plugins and themes premium. Or you can charge perusers, use ad-driven monetization, or accept donations through Patreon. You can also give your plugins and themes away free, to build social proof. Like all things, if no one knows who you are, sometimes it’s good to showcase a few freebies.

# Conclusion

There is no such thing as fast money.

Please feel free to drop me a line in the comments below! I’d like to hear how your journey is going.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[8 Things You Should Do Before 8 A.M.]]></title>
        <id>20220212223056-things-you-should-do-before-8-am</id>
        <link href="https://danfleser.com/posts/20220212223056-things-you-should-do-before-8-am"/>
        <updated>2022-02-12T22:30:56.819Z</updated>
        <summary type="html"><![CDATA[If you don't purposefully carve out time every day to progress and improve, without question, your time will get lost in the vacuum of our increasingly crowded lives. Before you know it, you'll be old and withered, wondering where all that time went.]]></summary>
        <content type="html"><![CDATA[
Life is busy. If you don’t purposefully carve time out every day to progress and improve.

- You are the designer of your destiny.
- You are responsible.
- You get to decide. You _must_ decide — because if you don’t, someone else will. Indecision is a bad decision.
- Remember. The goal needs to be long-term sustainability.

With this short morning routine, your life will quickly change.

- Wake up
- Get in the zone
- Get moving
- Put the right food in your body
- Get ready
- Get inspired
- Get perspective
- Do something to move you forward

# 1\. Get A Healthy 7+ Hours of Sleep

Let’s face it — Sleep is just as important as eating and drinking water. Despite this, millions of people do not sleep enough and experience insane problems as a result.

<img src="/images/20220212223056-sleep.png" alt="Healthy Sleep in bed" />

Getting a healthy amount of sleep is linked to:

- Increased memory
- Longer life
- Decreased inflammation
- Increased creativity
- Increased attention and focus
- Decreased fat and increased muscle mass with exercise
- Lower stress
- Decreased dependence on stimulants like caffeine
- Decreased risk of getting into accidents
- Decreased risk of depression
- And tons more… google it.

# 2\. Meditation Facilitate Clarity and Abundance

Meditation facilitate intense gratitude for all that you have. Gratitude is having an abundance mindset. When you think abundantly, the world is your oyster. There is limitless opportunity and possibility for you.

<img
  src="/images/20220212223056-meditate.png"
  alt="Meditation Facilitate Clarity and Abundance"
/>

What you think you become. People are magnets. When you’re grateful for what you have, you will attract more of the positive and good. Gratitude is contagious.

# 3\. Hard Physical Activity

Whatever your preference, get your body moving.

If you want to be among the healthy, happy, and productive people in the world, get in the habit of regular exercise. Many people go immediately to the gym to get their body moving. I have lately found that doing yard work in the wee hours of the morning generates an intense inflow of inspiration and clarity.

<img
  src="/images/20220212223056-focus.png"
  alt="Hard Physical Activity focus"
/>

Exercise has been found to decrease your chance of depression, anxiety, and stress. It is also related to higher success in your career.

# 4\. Take A Cold Shower

Cold water immersion radically facilitates physical and mental wellness. When practiced regularly, it provides long-lasting changes to your body’s immune, lymphatic, circulatory and digestive systems that improve the quality of your life. It can also increase weight-loss because it boosts your metabolism.

<img src="/images/20220212223056-shower.jpg" alt="Take A Cold Shower" />

# 5\. Listen to/Read Uplifting Content

It is common for the world’s most successful people to read at least one book per week. They are constantly learning.

<img src="/images/20220212223056-read.png" alt="Read books" />

Over a long enough period of time you’ll think and see the world differently. You’ll be able to make more connections between different topics.

# 6\. Review Your Life Vision

Your goals should be written down — short term and long term. Taking just a few minutes to read your life vision puts your day into perspective.

<img src="/images/20220212223056-plan.png" alt="write your goals" />

If you read your long term goals every day you will think about them every day. If you think about them every day, and spend your days working toward them, they’ll manifest.

Achieving goals is a science. There’s no confusion or ambiguity to it. If you follow a simple pattern, you can accomplish all of your goals, no matter how big they are.

A fundamental aspect of that is writing them down and reviewing them every single day.

# 8\. Eat that Frog! Do At Least One Thing Towards Long-Term Goals

_The worst comes first._ You need to do the hard stuff first thing in the morning.

<img
  src="/images/20220212223056-eat-the-frog-work.png"
  alt="Eat that Frog. the worst comes first"
/>

If you take just one step toward you big goals every day, you’ll realize those goals weren’t really far away.

# Conclusion

After you’ve done this, no matter what you have for the rest of your day, you’ll have done the important stuff first. You’ll have put yourself in a place to succeed.

<img src="/images/20220212223056-checklist.png" alt="life to do list" />

Because you’ll have done all these things, you’ll show up better in life. You’ll be better at your job. You’ll be better in your relationships. You’ll be happier. You’ll be more confident. You’ll be more bold and daring. You’ll have more clarity and vision.

Your life will shortly change.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[5 Websites To Take Your Front End Skills From ZERO To HERO]]></title>
        <id>20220212221019-frontend-end-skills-x100</id>
        <link href="https://danfleser.com/posts/20220212221019-frontend-end-skills-x100"/>
        <updated>2022-02-12T22:10:19.805Z</updated>
        <summary type="html"><![CDATA[Learning how to code is best accomplished by solving real-world problems and taking part in real-world projects. Despite the importance of theoretical knowledge, you do not have much chance of progressing without the ability to use it.]]></summary>
        <content type="html"><![CDATA[
# 1\. [Daily UI](https://www.dailyui.co/)

Every challenge is delivered to your mail and you can complete your challenges anytime as you may want.

<img
  src="/images/20220212221019-daily-ui-challenge.png"
  alt="greatest collections of designs ui&ux"
/>

# 2\. [100DaysCSS Challenge](hhttps://100dayscss.com/about/)

Focused to drill down on your CSS skills. You will rise up to be a CSS Guru after taking up this challenge.

_#100DaysChallenge_ is a very popular tag on Twitter. You can document your journey there and gain a lot along with the community there.

<img
  src="/images/20220212221019-100-days-css.png"
  alt="100 DAYS CSS CHALLENGE"
/>

# 3\. [Dribble](http://dribbble.com)

Features one of the greatest collections of designs over the internet. You can leverage these already built designs to code their clones.

<img
  src="/images/20220212221019-dribble.png"
  alt="greatest collections of designs ui&ux"
/>

In _dribble_, you can pick any design you may want to code and start making it.

# 4\. [CodePen Challenges](http://codepen.io)

_Codepen_ also offers a lot of [challenges](https://codepen.io/challenges/) that help you to level up your skills by building things. They have a monthly theme and each week you will be prompted with a new challenge.

<img
  src="/images/20220212221019-codepen.png"
  alt="codepen challenge collection"
/>

There is a huge number of participants and a majority of them share their codepen with others. So, you’ll never feel like you are doing it alone. The community is there to lift you up.

# 5\. [Frontend Mentor](https://www.frontendmentor.io/challenges)

Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 303,212 developers building projects, reviewing code, and helping each other get better.

<img
  src="/images/20220212221019-frontend-mentor-challenge.png"
  alt="HTML, CSS and JavaScript challenge"
/>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7 Tricks To Master the Art of Googling]]></title>
        <id>20220212095550-master-the-art-of-googling</id>
        <link href="https://danfleser.com/posts/20220212095550-master-the-art-of-googling"/>
        <updated>2022-02-12T09:55:50.012Z</updated>
        <summary type="html"><![CDATA[Great developers are great at googling. If you've heard it, you've heard right. Googling is a must-know skill for developers. It can help you effectively search for a solution to a problem or an error. If you want to find the right answer to a problem, you need to know how to ask the right question. This lifelong key skill can save a lot of your time and effort.]]></summary>
        <content type="html"><![CDATA[
# 1\. Use Quotes To Match Exact Phrases

<img src="/images/20220212095550-query.png" alt="Searching for exact phrases" />

# 2\. Use keyword1 AND/OR keyword2

<img
  src="/images/20220212095550-and.png"
  alt="Searching with the AND operator"
/>

<img src="/images/20220212095550-or.png" alt="Searching with the OR operator" />

# 3\. Exclude Certain Terms Using the Minus Sign

<img
  src="/images/20220212095550-minus.png"
  alt="Search excluding words to reduce the context to your query"
/>

# 4\. Use Wild Cards in Your Search Term

When you use an asterisk (\*) in the search terms, this acts as a placeholder that Google automatically fills before delivering the results.

<img
  src="/images/20220212095550-wild-card.png"
  alt="Searching using wild cards"
/>

# 5\. Find Websites Similar to Another Website

<img
  src="/images/20220212095550-related.png"
  alt="Searching for related sites"
/>

# 6\. Search a Website Using Google

Did you know that you can search inside a website using Google? With this feature, you can find articles, blog posts, and pages published on a particular site — especially when it doesn’t have a built-in search feature available.

<img
  src="/images/20220212095550-search-website.png"
  alt="Searching within a site"
/>

# 7\. Gradually Increase the Words in Your Search Term

Google recommends that you start a search with only the basic search terms. For example, if you are trying to find courses for learning Javascript, start with the most basic phrase and gradually increase the number of words in your search term until you find what you are looking for:

- JavaScript courses
- JavaScript courses for beginners
- JavaScript courses for beginners Youtube

Following this searching strategy has a few benefits. Using a broader search term first gives you the chance to see the big picture of the topic and the different avenues available to take. It also ensures that you don’t miss any important information by going straight to a refined, focused search term. As you add more words to the search term, you get to see results that are more targeted to your specific needs.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[5 CSS Practices To Avoid as a Web Developer]]></title>
        <id>20220212092333-avoid-css-practices</id>
        <link href="https://danfleser.com/posts/20220212092333-avoid-css-practices"/>
        <updated>2022-02-12T09:23:33.110Z</updated>
        <summary type="html"><![CDATA[Some people think that CSS is difficult to learn. There are lots of crutches and even some magic, which makes it easy to shoot yourself in the foot. I feel sad about this since I don’t think so.]]></summary>
        <content type="html"><![CDATA[
# 1\. Using the Same Rule Repetitively

A lot of beginners use repetitive rules for each element. If you want to create a rule for multiple elements, use a class attribute instead.

<img
  src="/images/20220212092333-gta-rewrite-css-meme.png"
  alt="rewrite css meme GTA ah shit here we go again"
/>

Do not do this:

```css
#intro1 {
  color: #3498db;
  font-size: 10px;
  font-weight: bold;
}

header {
  color: #3498db;
  font-size: 20px;
  background-color: green;
}

#banner {
  color: #3498db;
  font-size: 30px;
  background-image: url(images/static.jpg);
}
```

You can use:

```css
.blue {
  color: #3498db;
}
```

# 2\. Shoving everything into one CSS file

Having a 3500 line CSS file is NOT the way to go. Even if you minify at a later date. You should start separating them into the 'views' or 'components' when you are working on a bigger project.

# 3\. Naming your CSS selectors unnecessarily descriptive

'.sqaured-yellow-border-card' when '.card' will be suffice

# 4\. !important this, !important that, !important !important

People who know how to write CSS never use these.

<img
  src="/images/20220212092333-important-css.jpg"
  alt="css important meme bad practice"
/>

# 5\. Set Margins or Padding and Then Reset Them

I often see people set margins or padding for all elements and then reset them for the first or last element. I don’t know why they use two rules when you can get by with one. It’s much easier to set margins and padding for all the required elements at once.

<img
  src="/images/20220212092333-box-model-css.jpg"
  alt="css box model margin padding meme"
/>

Use one of the following for simpler and more concise CSS: `nth-child`/`nth-of-type` selectors, the `:not()` pseudo-class, or the adjacent sibling combinator better known as `+`.

Do not do this:

```css
.item {
  margin-right: 1.6rem;
}

.item:last-child {
  margin-right: 0;
}
```

You can use:

```css
.item:not(:last-child) {
  margin-right: 1.6rem;
}
```

Or

```css
.item:nth-child(n + 2) {
  margin-left: 1.6rem;
}
```

Or

```css
.item + .item {
  margin-left: 1.6rem;
}
```
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7 Alternatives to the <div> HTML Tag]]></title>
        <id>20220212071527-div-tag</id>
        <link href="https://danfleser.com/posts/20220212071527-div-tag"/>
        <updated>2022-02-12T07:15:27.508Z</updated>
        <summary type="html"><![CDATA[In the early stages of learning how to structure an HTML document, it’s not uncommon to end up with what some developers call “div soup.” Need a content section your homepage? Wrap in a div! Building a sidebar? Div it up! Three column layout? Div, div, div!]]></summary>
        <content type="html"><![CDATA[
Does your HTML markup look like this 👆?

So you've made a delicious [div soup](https://www.pluralsight.com/blog/software-development/html5-web-components-overview)?, no problem. I'm here to help.

Writing [Semantic HTML](https://www.lifewire.com/why-use-semantic-html-3468271) gives your markup meaning to web browsers and screen readers and helps with SEO which brings your website on top of search engine results.

> “The `div` element has no special meaning at all…Authors are strongly encouraged to view the `div` element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the `div` element leads to better accessibility for readers and easier maintainability for authors.”

# The `Main` Element

The [main](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main) element indicates to browsers and screen readers which portion of your markup contains the main section of content on a given page. This can help with keyboard command access, zooming on mobile browsers, and more. It should be used only once per page.

```html
<main>
  <h1>Most Popular Browsers</h1>
  <p>Chrome, Firefox, and Edge are the most used browsers today.</p>

  <article>
    <h2>Google Chrome</h2>
    <p>
      Google Chrome is a web browser developed by Google, released in 2008.
      Chrome is the world's most popular web browser today!
    </p>
  </article>

  <article>
    <h2>Mozilla Firefox</h2>
    <p>
      Mozilla Firefox is an open-source web browser developed by Mozilla.
      Firefox has been the second most popular web browser since January, 2018.
    </p>
  </article>

  <article>
    <h2>Microsoft Edge</h2>
    <p>
      Microsoft Edge is a web browser developed by Microsoft, released in 2015.
      Microsoft Edge replaced Internet Explorer.
    </p>
  </article>
</main>
```

# The `Section` Element

The [section](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section) element is used to group content by theme and represents a section of a document or application. Sections can have their own `header` and `footer` elements, and there can be multiple `section` elements used on a single page.

```html
<section>
  <h2>WWF History</h2>
  <p>
    The World Wide Fund for Nature (WWF) is an international organization
    working on issues regarding the conservation, research and restoration of
    the environment, formerly named the World Wildlife Fund. WWF was founded in
    1961.
  </p>
</section>

<section>
  <h2>WWF's Symbol</h2>
  <p>
    The Panda has become the symbol of WWF. The well-known panda logo of WWF
    originated from a panda named Chi Chi that was transferred from the Beijing
    Zoo to the London Zoo in the same year of the establishment of WWF.
  </p>
</section>
```

# The `Aside` Element

The [aside](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside) elements are mainly used to represent part of a page containing related content to a given section. Asides are typically used as sidebars.

```html
<p>
  My family and I visited The Epcot center this summer. The weather was nice,
  and Epcot was amazing! I had a great summer together with my family!
</p>

<aside>
  <h4>Epcot Center</h4>
  <p>
    Epcot is a theme park at Walt Disney World Resort featuring exciting
    attractions, international pavilions, award-winning fireworks and seasonal
    special events.
  </p>
</aside>
```

# The `Article` Element

The [article](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article) element can be used for portions of content that could stand on their own. Blog posts, newspaper articles, and user comments are some possible use cases the the `article` element.

```html
<article>
  <h2>Google Chrome</h2>
  <p>
    Google Chrome is a web browser developed by Google, released in 2008. Chrome
    is the world's most popular web browser today!
  </p>
</article>

<article>
  <h2>Mozilla Firefox</h2>
  <p>
    Mozilla Firefox is an open-source web browser developed by Mozilla. Firefox
    has been the second most popular web browser since January, 2018.
  </p>
</article>

<article>
  <h2>Microsoft Edge</h2>
  <p>
    Microsoft Edge is a web browser developed by Microsoft, released in 2015.
    Microsoft Edge replaced Internet Explorer.
  </p>
</article>
```

# The `Blockquote` Element

The [blockquote](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote) element represents content that is being quoted from an external source (a person, document, newspaper, case study, etc.). It is often accompanied by the `cite` element to attribute the quote to its source.

```html
<blockquote cite="http://www.worldwildlife.org/who/index.html">
  For 50 years, WWF has been protecting the future of nature. The world's
  leading conservation organization, WWF works in 100 countries and is supported
  by 1.2 million members in the United States and close to 5 million globally.
</blockquote>
```

# The `Nav` Element

The [nav](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav) elements represent the navigation section of a document. The `nav` element should include the primary navigation links for a give page, application, etc.

```html
<nav>
  <a href="/html/">HTML</a> | <a href="/css/">CSS</a> |
  <a href="/js/">JavaScript</a> |
  <a href="/python/">Python</a>
</nav>
```

# The `Header` Element

The [header](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header) element represents the “header” section of a document or section. In many websites, the `header` element will contain introductory content but also a logo, a search form, an author name.

```html
<header>
  <h1>A heading here</h1>
  <p>Posted by John Doe</p>
  <p>Some additional information here</p>
</header>
```

# The `Footer` Element

The [footer](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer) element represents the “footer” section of a document or section. In many websites, the `footer` element will contain contact and copyright information, a brief “about” blurb, social media logos and links, etc.

```html
<header>
  <p>Author: Hege Refsnes</p>
  <p><a href="mailto:hege@example.com">hege@example.com</a></p>
</header>
```

Now that we know about some semantically optimized alternatives to the `div` element, how do we know when to use each of them? And when (if ever) is it ok to still use `div` elements in our markup? [HTML5 Doctor](http://html5doctor.com) has a really handy flowchart to help answer that question:

<img
  src="/images/20220212071527-div-tag-diagram.png"
  alt="Adding console logs to render expressions"
/>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Top Websites for Web Developers]]></title>
        <id>20220212064149-web-dev-websites</id>
        <link href="https://danfleser.com/posts/20220212064149-web-dev-websites"/>
        <updated>2022-02-12T06:41:49.580Z</updated>
        <summary type="html"><![CDATA[Web development is a specific field that requires excellent knowledge of coding, UX, web design, and many more skills. Online resources make a significant investment in time when you need to get the latest info on new trends and standards, coding languages, and best practices.]]></summary>
        <content type="html"><![CDATA[
# 1\. Random Image via API

[Link](https://source.unsplash.com)

The most powerful photo engine in the world. The Unsplash API is a modern JSON API that surfaces all of the info you’ll need to build any experience for your users

# 2\. Carbon

[Link](http://carbon.now.sh)

Create and share beautiful images of your source code. Start typing or drop a file into the text area to get started.

# 3\. Peppertype

[Link](https://peppertype.ai)

Generate better content copies in seconds with the power of Artificial Intelligence. Expanding your content for writing blogs is easier than ever before. Get AI-Generated tweet ideas in seconds.

# 4\. Poet. so

[Link](http://poet.so)

Capture and share Twitter posts as beautiful images. You could use this as social proof on your website.

# 5\. Small Dev tools

[Link](https://smalldev.tools)

Handy developer tools with a delightful interface. Provide 20+ tools that help developers with commonly performed tasks like Encoding/Decoding, Minifying, Test Dummy data set, and a lot more.

# 6\. Show beautiful message in the console

[Link](http://npmjs.com/package/figlet)

FIGlet is a program for making large letters out of ordinary text.

# 7\. A Visual Type Scale

[Link](http://type-scale.com)

Understand and visualize the difference between different font sizes, REM vs. EM Values. Check the preview in real-time to see how it looks

# 8\. Remove Background from Image

[Link](https://remove.bg)

Remove backgrounds 100% automatically in 5 seconds with zero clicks.

# 9\. Responsively

[Link](https://responsively.app)

Develop responsive web apps 5x faster!

# 10\. Metatags

[Link](http://metatags.io)

Meta Tags is a tool to debug and generate meta tag codes for any website. Tags you can edit and experiment with your content then preview how your webpage will look on Google, Facebook, Twitter, and more!

# 11\. ReadMe

[Link](https://readme.so)
The easiest way to create a README file in minutes visually

# 12\. unDraw

[Link](https://undraw.co/illustrations)

High-class illustrations for web and mobile projects. Make your project eye-catching with awesome characters. Use it both for commercial and personal purposes.

# 13\. Profile Pic Maker

[Link](https://pfpmaker.com)

Make an awesome profile picture from any photo

# 14\. SigmaOS

[Link](http://sigmaos.com)

Fly through your work. The browser that makes you faster and better at working on the web.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Best Practices for REST APIs Architecture]]></title>
        <id>20220212062358-api-architecture</id>
        <link href="https://danfleser.com/posts/20220212062358-api-architecture"/>
        <updated>2022-02-12T06:23:58.163Z</updated>
        <content type="html"><![CDATA[
# 1\. Learn the basics of [HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview)

- HTTP has **verbs** (actions or methods): GET, POST, PUT, PATCH and DELETE are most common.
- REST is **resource-oriented** and a resource is represented by an **URI**: `/library/`
- An **endpoint** is the combination of a verb and an URI, example: `GET: /books/`
- An endpoint can be interpreted as an _action performed on a resource_**_._** Example: `POST: /books/` may mean "Create a new book".
- At a high-level, **verbs map to CRUD operations**: `GET` means `Read`, `POST` means `Create`, `PUT` and `PATCH` mean `Update`, and `DELETE` means `Delete`
- A response’s status is specified by its **status code**: `1xx` for **information**, `2xx` for **success**, `3xx` for **redirection**, `4xx` for **client errors** and `5xx` for **server errors**

# 2\. Do not return plain text

Most REST APIs by convention use JSON as the data format.

You should still **specify the** `**Content-Type: application/json**` **header.**

# 3\. Do not use verbs in URIs

\# Don’t do this
GET: /books/:slug/getBook/
\# Do this
GET: /books/:slug

\# Don’t do this
POST: /books/createNewBook/
\# Do this
POST: /books/

This is because the **HTTP verbs should be sufficient to accurately describe the action being performed on the resource**.

# 4\. Use plural nouns for resources

**My personal advice is to _use the plural form_.**

GET: /books/2/
POST: /books/
...

# 5\. Return the error details in the response body

When an API server handles an error, it is convenient (\*and recommended\*) to return **error details** within the JSON body to **help consumers with debugging**. Even better if you include which fields were affected by the error!

{
"error": "Invalid payload.",
"detail": {
"name": "This field is required."
}
}

# 6\. Pay special attention to HTTP status codes

> _The worst thing your API could do is_ return an error response _with a_ `_200 OK_` _status code._

**Make use of the HTTP status code, and use the response body to provide error details**.

HTTP/1.1 400 Bad Request
Content-Type: application/json{
"error": "Expected at least three items in the list."
}

# 7\. You should use HTTP status codes consistently

GET: 200 OK
PUT: 200 OK
POST: 201 Created
PATCH: 200 OK
DELETE: 204 No Content


# 8\. Make use of the querystring for filtering and pagination

Your consumers may want to retrieve items that fulfill a specific condition, or retrieve them in small amounts at a time to improve performance.

With **filtering**, consumers can specify parameters (or properties) that the returned items should have.

**Pagination** allows consumers to retrieve _fractions of the set of data_. The simplest kind of pagination is **page number pagination**, which is determined by a `page` and a `page_size`.

GET: /books?page=1&page_size=10

\# Don’t do this
GET: /books/published/
\# Do this
GET: /books?published=true&page=2&page_size=10

# 9\. Do not nest resources

My personal recommendation is to **use query string parameters** to filter the `books` resource directly:

GET: /books?author=Dan

And this clearly means: “Get all books for author name Dan”

# 10\. Know the difference between `401 Unauthorized` and `403 Forbidden`

- Has the consumer not provided authentication credentials? Was their SSO Token invalid/timed out? 👉 `401 Unauthorized`.
- Was the consumer _correctly authenticated_, but they _don’t have the required permissions/proper clearance_ to access the resource? 👉 `403 Forbidden`.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Negotiate for a Better Salary]]></title>
        <id>20220211001015-negotiate-salary</id>
        <link href="https://danfleser.com/posts/20220211001015-negotiate-salary"/>
        <updated>2022-02-11T00:10:15.659Z</updated>
        <content type="html"><![CDATA[
# When making a big professional change, you may not feel you’re entitled to ask for more money. Do it anyway.

There’s a lot of excellent negotiating advice available. You can find it in dozens of career books or online. Here’s a quick synopsis:

- Defer the in-depth salary discussion until after you have an official offer in hand.
- Research your market value and how to relay it to the employer based on what you bring to the role.
- Focus on your worth in the market, not what you personally want or need or what you were making in the last position.
- Never accept an offer on the spot, even a seemingly great offer. There’s always something to negotiate.
- Negotiate directly with the hiring manager (versus the headhunter or human resources).
- Be confident and respectful, not demanding or entitled.
- Don’t drag out the negotiations over multiple meetings. Know your negotiating points and alternative options so you can be efficient.
- Know your BATNA (best alternative to a negotiated agreement) and your walk-away number.

All these steps are important. Just add this one vital strategy: _Go into the negotiation meeting assuming positive intent on the part of the hiring manager._ While it’s advisable to prepare your rationale—it will give you the confidence and data support you need—you’ll end up with a better outcome by going into the discussion expecting success. Hiring managers anticipate that you will negotiate. Unless your requests are completely unreasonable or presented as demands, managers will likely be happy to revise the offer if they’re able. Even if they can’t give you exactly what you want, ask if they can meet you in the middle.

Keep the large view of a compensation package in mind. Look at the _total_ compensation. You may not be losing as much as you think if the company covers tuition reimbursement and your commute requires much less gas. It’s worth the extra effort to think creatively. Perhaps you have experiences that will add additional value. If your desktop publishing skills could save the company $5,000 annually on an external vendor, maybe they could add this amount to your salary when they hire you. Remember, if you don’t ask, the answer is always no.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js Developer Roadmap for 2022]]></title>
        <id>20220210231236-nodejs-roadmap-2022</id>
        <link href="https://danfleser.com/posts/20220210231236-nodejs-roadmap-2022"/>
        <updated>2022-02-10T23:12:36.210Z</updated>
        <content type="html"><![CDATA[
# JavaScript

- Arrow Functions
- Types
- Expressions
- Functions
- Lexical Structures
- this
- Loops and Scope
- Arrays
- Template Literals
- Strict Mode
- ES6/ES7
- Timers
- Promises
- Closures
- The Event Loop
- Async programming and callbacks

# Node.js Basics

**Event Emitters:** They are objects in **Node.js** that trigger events by sending a message to signal that an action was completed. We can also write our own code that listens to events from an event emitter. _For example_, if you have done some frontend work, then you probably know how much interaction we need to handle in our applications, such as **mouse clicks, keyboard button presses,** and other mouse movements. Similarly, on the backend environment in Node.js, we can build a similar system using the events module, which offers **EventEmitter** class which we use to handle our events.

**Callbacks:** These are functions called when a task is completed, which prevents any kind of blocking while allowing the rest of the code to run in the meantime. As we have to work with a lot of asynchronous tasks in Node.js, we need them everywhere for making seamless and faster applications. **For example,**

**Buffers:** A class called Buffer in Node.js is designed to handle raw binary data. They correspond to some raw memory allocated outside **V8**. Buffers are an array of integers that can’t be resized having a whole bunch of methods specifically for binary data. For example, the integers in buffer represent a byte with limited values from **0** to **255** inclusive, if you **_console.log()_** to print a Buffer instance, a chain of values in hexadecimal will be received.

**Module System:** As a part of the Node.js ecosystem you will be using the Module for implementing complex functionality by just using the Modules provided by Node.js, these are JavaScript files that contain all the organized and complex features that anyone can reuse through the Node.js application.

# Development Skills

**Version Control Systems (Git, GitHub):** You don’t want to be in a situation where you mess up something in your code while having no idea how to revert it. Using VCS like **Git** you can manage large scale projects & if you are already pretty familiar with using VCS then make sure that you have strong fundamental of Version Control Systems.

**HTTP/HTTPS protocols:** A fundamental knowledge of how the data is transferred using the transfer protocols will make you a better Node.js developer, a good understanding of how HTTP and HTTPS work is something every backend developer should understand well enough. HTTPS uses an encryption protocol known as Transport Layer Security **(TLS)**to encrypt communications. There is a lot to learn in the backend environment and it might get a little foggy for you if you had no idea how the web works, there are 4 request methods responsible for any basic communication on the web:

- **GET:** Used to retrieve a representation of a resource
- **POST:** Used to create new resources
- **PUT:** Used to update capabilities
- **PATCH:** Used to modify capabilities
- **DELETE:** Used to delete a resource identified by a URL
- **OPTIONS:** Request permitted communication option for a given URL or server

# Web Frameworks

**Express.js:** Provides a very minimal interface and tools that are required to build our application, quite flexible to use, and comes with numerous modules available on **npm** which can be plugged directly into Express.

**Koa.js:** If you are looking to build robust applications that are future proof and easy to maintain then Koa.js is a good choice. A **Koa** application is an object containing an array of some middleware functions that are later executed in a manner of stacks.

**Nest.js:** Inspired by Angular and built with **TypeScript**, uses Express.js under the hood which makes it compatible with most of Express middleware. You can build an efficient and scalable application with Nest.js as it provides a great modular structure for organizing code into separate modules.

# Database Management

**SQL Server:** A relational database management system developed by Microsoft, it supports **ANSI SQL** (a standard SQL language). However, SQL comes with its own implementations.

**MySQL:** Another great database management system that allows you to mage relational databases. Open-source backend software developed by Oracle, also with MySQL we get the flexibility of choices as we can change the source code according to the needs. MySQL is a pretty easy alternative as compared to **Oracle Database** & **Microsoft SQL server.**

**PostgreSQL:** Developed by a worldwide team of developers as it is open source. It runs on all major operating systems including Linux, UNIX & Windows. PostgreSQL supports a large part of the SQL standard while offering some great features such as **Complex SQL queries, Foreign Keys, Trigger, Transactions, Multiversion concurrency control (MVCC), Streatimg Repllicartons, etc.**

**MariaDB:** An improved version of MySQL that comes which various inbuilt powerful features, security, and performance improvements that you will not find in MySQL. There are several reasons why you should opt for MariaDB instead of MySQL for large-scale applications. For example, MariaDB has a larger connection pool supporting up to 200,000+ connections whereas MySQL has a smaller connection pool. _In short,_ **_MariaDB_** _is faster than_ **_MySQL_**_._

# Cloud Database Services

**Azure CosmosDB:** A database service that is globally distributed, you can manage your data remotely, using cloud databases gave you many advantages as scaling and managing big applications becomes a bit easy with the tool that you can use to scale and distribute, all provided by **Microsoft Azure**. Also, it supports multiple data models using one backend, which means it can be used for the document, key-value, relational & graph models. As it doesn’t rely on any schemas you can call it a **NoSQL** database, but it does support query language with **_ACID_** transaction support.

**Amazon DynamoDB:** As far as my knowledge **Amazon DynamoDB** is a great alternative if you already have some experience with SQL, it is a fully managed NoSQL database service providing faster and predictable performance with awesome scalability. You can create databases tables that can store and retrieve any amount of data and serve any level of request traffic

# NoSQL Databases

**MongoDB:** A document-oriented NoSQL database specifically used for high volume data storage, as we have tables and rows in other relational databases, MongoDB uses collections and documents. A document consists of key-value pairs that are just basic unit of data in MongoDB & collection contains sets of documents and function which is the equivalent of relational databases tables

**Redis:** Using Redis we can work with databases, caching, and message broking. It uses data structures like **strings, hashes, lists, sets, bitmaps, hyperloglogs** & **geospatial indexes** to store data in the form of key-value pairs. If you are confused about where we use Redix, here is an example of that.

Let’s say in our application we have to deal with users who are authorized to take different actions within the application, each time we authenticate a user we have to derive their authorization for controlling acces in the applicaation.There is nothing buggy about this approach as we have good standards like **JOSE** while keeping our **key material safe**, but if our application has more than a couple of authorisations, the same becomes very hard to scale. And instead of sendind the list of authorization to the user, we can store the user’s authorization in some form of database and provide the user a **key-value** (known as a token) which they have to send us for authorization.

# Apache Cassandra

A highly scalable with high-performance and distributed database designed to handle a large amount of data across many servers, with no single point of failure. Created at **Facebook** it differs from other relational database management systems. The distributed design is based on Amazon’s **DynamoDB** and the data model on **Google’s BigTable**.

# Search Engines

**_Note:_** _If you are thinking why do we need a search engine, then here is an example, we use Google as a search engine, but that’s itself a whole web based application._ **_Solr_** _and_ **_ElasticSearch_** _are backend frameworks and if any type of data set is provided it creates an index on top of that while making that data available for search on a server. You can maintain a website with million of users with Solr as the search engine._

# ElasticSearch

A search and analytics engine built on **Apache Lucene** and developed in **Java**. Using ElasticSearch you can store, and analyze huge volumes of data in real-time. As it searches the index instead of searching the text, great search performance is also achieved in ElasticSearch. At its core, it uses structure-based documents instead of tables and schemas that come with extensive **_REST APIs_** for storing and searching data. You can think of ElasticSearch as a server that processes **_JSON_** requests and giving you back JSON data.

# Memory Cache

This technique is also commonly called caching as most of the time, the caching is associated with the memory in servers. In this technique, a portion of the server’s memory is used as a cache where we store all the data that is required to reduce network calls in our applications. In Node.js we have **node-cache** and **memory-cache** as some great libraries to handle memory cache in a Node server.

# Distributed Cache

In this caching technique we combine the memory of multiple networks into a single memory data store which we later use as the final data cache to prove fast access to the data. This technique is especially used in a high volume of data and a huge number of network calls at the same time allows incremental expansion and scaling by adding more server memory to the cluster.

# Socket.io

There is a lot when it comes to understanding real-time communication in Socket.IO if you are just getting started as a backend developer, the main logic behind real-time communication stands between the **client** and the **server.** It allows the flow of **bi-directional** data between the client & server, you can think of bi-directional data flow as the synchronous flow of data between two terminals to achieve the real-time communication behavior, these types of behavior are enabled when the client has Socket.IO in the browser along with the server integrated with Socket.IO package. And the data can be sent in the form of **JSON** requests.

# REST

Before REST, APIs were developed around a remote procedure call (RPC) and the APIs looked like some locally executed code. Many technologies tried to solve this problem using RPC-like stacks to hide the root problem and after that REST was introduced to build web-based APIs in a better way.

In REST the architecture is styled with simple HTTP calls to communicate instead of complex options like **COBRA, COM+, RPC**. In REST the calls are messages based and rely on the _HTTP_ standards to describe these messages. In the **_Node.js_** ecosystem, you can go for the **node-rest-client** and **Axios**, both serve pretty good service for faster web applications.

# GraphQL

A great alternative to REST, GraphQL uses the APIs that prioritize giving clients exactly the data they request. A flexible and developer-friendly alternative, as you can deploy it even in an IDE known as **GraphiQL.** You also get the advantages to add or deprecate fields without impacting existing **queries** and build APIs with whatever method is preferred.

# Unit Testing Frameworks

**Jest:** A very popular testing framework known for its simplicity and developed by **Facebook**. Among all the testing frameworks Jest has the best documentation with parallel testing support, which means that you can run each test in their own process to maximize performance.

**Mocha:** It serves the old standards of Unit Testing frameworks for Node applications and supports async operations like callbacks, promises with highly extensible and customizable assertions.

**Chai:** It can be used alongside Mocha and can be used as a **_TDD/BDD_** assertion library for Node.js that can be paired with any testing framework based on **JavaScript**.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Best React Hacks For Lazy Devs]]></title>
        <id>20220210230144-react-hacks-for-lazy-devs</id>
        <link href="https://danfleser.com/posts/20220210230144-react-hacks-for-lazy-devs"/>
        <updated>2022-02-10T23:01:44.602Z</updated>
        <content type="html"><![CDATA[
# 1. Adding console logs to render expressions

If you wanna log the props to an expression style component but can’t be bothered to convert it, put the log in parentheses then add chopsticks `||`:

<img
  src="/images/20220210230144-1.png"
  alt="Adding console logs to render expressions"
/>

Note. you have to use the _or_ operator because console.log returns undefined.

# 2. Trace a function’s call with the Error object

If you’ve no idea where a function’s being called from, log an `Error` object in it and you’ll get a stack trace in the console:

<img
  src="/images/20220210230144-2.png"
  alt="Trace a function’s call with the Error object"
/>

# 3. Ternary question marks

Want to write more ternary question marks? Most people know that using `||` and `&&` is a super quick way of writing conditions, but did you know there’s a `??` as well?

<img src="/images/20220210230144-3.png" alt="Ternary question marks" />

This says, if `state?.bookings` is undefined return `{}`.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Roadmap for React js developers in 2022]]></title>
        <id>20220210224305-react-roadmap</id>
        <link href="https://danfleser.com/posts/20220210224305-react-roadmap"/>
        <updated>2022-02-10T22:43:05.683Z</updated>
        <content type="html"><![CDATA[
<img src="/images/react-roadmap.png" alt="Roadmap for React js developers" />

# Resources

- [ReactStrap](https://reactstrap.github.io/)
- [Ant Design](https://ant.design/)
- [Blueprint JS](https://blueprintjs.com/)
- [Evergreen](https://evergreen.segment.com/)
- [Storybook](https://storybook.js.org/)

# Unit Testing

- [Jest](https://facebook.github.io/jest/)
- [React testing library](https://testing-library.com/docs/react-testing-library/intro)
- [Enzyme](http://airbnb.io/enzyme/)
- [Sinon](http://sinonjs.org/)
- [Mocha](https://mochajs.org/)
- [Chai](http://www.chaijs.com/)
- [AVA](https://github.com/avajs/ava)
- [Tape](https://github.com/substack/tape)

# End to End Testing

- [Selenium](https://www.seleniumhq.org/)
- [Webdriver](http://webdriver.io/)
- [Cypress](https://cypress.io/)
- [Puppeteer](https://pptr.dev/)
- [Cucumber.js](https://github.com/cucumber/cucumber-js)
- [Nightwatch.js](http://nightwatchjs.org/)

# Integration Testing

- [Karma](https://karma-runner.github.io/)

# Internationalization

- [React Intl](https://github.com/yahoo/react-intl)
- [React i18next](https://react.i18next.com/)

# Server-Side Rendering

- [Next.js](https://nextjs.org/)
- [After.js](https://github.com/jaredpalmer/after.js)
- [Rogue](https://github.com/alidcastano/rogue.js)
- [Frotinity](https://frontity.org/)

# Static Site Generator

- [Next.js](https://nextjs.org/)
- [Jamstack](https://jamstack.org/generators/)
- [Gatsby](https://www.gatsbyjs.org/)

# Mobile

- [React Native](https://facebook.github.io/react-native/)
- [Cordova](https://cordova.apache.org/)
- [Phonegap](https://phonegap.com/)

# Desktop

- [Proton Native](https://proton-native.js.org/)
- [Electron](https://electronjs.org/)
- [React Native Windows](https://github.com/Microsoft/react-native-windows)

# Virtual Reality

- [React 360](https://facebook.github.io/react-360/): This allows you to be exciting 360 and VR experiences using React.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tools Every Remote Product Manager’s should use in 2022 ]]></title>
        <id>20220210222838-product-managers-fav-tools-2022</id>
        <link href="https://danfleser.com/posts/20220210222838-product-managers-fav-tools-2022"/>
        <updated>2022-02-10T22:28:38.604Z</updated>
        <content type="html"><![CDATA[
# [Slack](http://slack.com)

Really does take the cake when it comes to company wide communication.
Integrations and automations (Zoom, Around, Linear, Figma, etc) to make things easier to view, monitor, and/or take action on.

It’s the most powerful and effective tool I use every single day.

# [Zoom](http://zoom.us)

The easiest and most reliable video/audio conferencing software I’ve ever used, period.

# [Notion](http://notion.so)

I quickly realized Notion is one of the most flexible “productivity” apps that I’ve ever used — one piece of software to take meeting notes, write requirements, connect pieces of data between pages and tables, and much more. I use Notion multiple times a day and actually look forward to the experience.

# [Otter.ai](http://otter.ai)

Interesting tool that helps me record (audio only) and transcribe important meetings.

# [Hotjar](https://www.hotjar.com/)

Allows for playback session of users sessions and makes it extremely easy to gather feedback from actual users.

# [Linear](http://linear.app)

The better task management tools I’ve used in my PM career — I call it JIRA’s hipster, younger brother. It’s straightforward and makes sense to track software development projects, software bugs, roadmaps, etc.

# [Whimsical](https://whimsical.com/)

My preferred tool for wireframing, process documentation, prototyping, etc. It’s extremely simple while remaining wildly flexible and collaborative.

A good project manager also has to have a standing desk.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Top 6 Hardest FAANG Interviews Coding Questions]]></title>
        <id>20220209205657-top-6-hardest-faang-interviews-coding-questions</id>
        <link href="https://danfleser.com/posts/20220209205657-top-6-hardest-faang-interviews-coding-questions"/>
        <updated>2022-02-09T20:56:57.046Z</updated>
        <content type="html"><![CDATA[
- How would you improve shopping experience via Alexa?
- How to design a garbage collector?
- How would you design a YouTube for senior citizens?
- How to implement an LRU cache?
- How would you design a library for future?
- How would you design toothbrush for young children?
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[19 lessons I wish I'd known earlier in my software engineering career]]></title>
        <id>20220208213007-19-lessons-i-wish-id-known-earlier-in-my-software-engineering-career</id>
        <link href="https://danfleser.com/posts/20220208213007-19-lessons-i-wish-id-known-earlier-in-my-software-engineering-career"/>
        <updated>2022-02-08T21:30:07.709Z</updated>
        <content type="html"><![CDATA[
# 1. Choose a language

You need to start slow. Practice as much as possible.

# 2. Understand a programming concept

If you don’t remember the syntax that’s fine, use Google to find answers.

# 3. Use online tutorials

You get multiple perspectives. It helps you learn faster and more efficiently.

# 4. Dedicate hours for learning every day in your calendar

Read blogs. Keep learning new things and use what you learned by building something useful.

# 5. Practice, Practice, Practice!

The saying “_practice makes perfect_” is very true if you’re willing to put in the time to be great at something.

# 6. Don’t give up

One key to becoming a good coder is to never give up.

# 7. Don’t reinvent the wheel

Not every solution needs to be built from scratch, use existing libraries.

# 8. Work on your soft skills

Practice writing, It helps you in the long run and will help you stand out from the rest.

# 9. Build a strong portfolio of projects

Learn + Build things, a win-win situation.

# 10. Document Your Journey

Write blog posts. Many people who are starting their journey today, are definitely going to be inspired by your writings.

# 11. Earn while you learn

More here - [Make money blogging while learning new things](https://danfleser.com/posts/20220204024814-why-how-to-blog-10-ways-developers-make-money-coding-course-e06/)

# 12. Define small goals

Take one thing at a time, this is the ultimate confidence booster.

# 13. Don’t be afraid to ask for help

Don’t feel shy to ask even if you have silly questions. Use [StackOverflow](https://stackoverflow.com/).

# 14. Challenge yourself

Don’t compete with others, compete with yourself.

# 15. Learn the basics and build small applications

Powerful foundation = 20+ small applications. Keep track in a github repo.

# 16. Refuse negative talk

Remember programmers never quit, there is always a workaround. Take a break and bounce back stronger.

# 17. Remember nobody is born a pro

Consistency, hard work and giving your best shot will make you a pro.

# 18. Nothing works unless you do

Practice makes a man perfect.

# 19. Focus on the process, not the outcome

If you have a solid foundation, the rest is easy to crack.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Contributing To Open Source 10 Ways Developers Make Money Coding Course E10]]></title>
        <id>20220204025234-contributing-to-open-source-10-ways-developers-make-money-coding-course-e10</id>
        <link href="https://danfleser.com/posts/20220204025234-contributing-to-open-source-10-ways-developers-make-money-coding-course-e10"/>
        <updated>2022-02-04T02:52:34.867Z</updated>
        <content type="html"><![CDATA[
As a web developer, you have the opportunity to contribute to open-source projects.

You can contribute by fixing bugs or implementing features.

It's is a great way to get involved with the community and make new connections.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/qVN9FIY0j4Y"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mentoring 10 Ways Developers Make Money Coding Course E09]]></title>
        <id>20220204025140-mentoring-10-ways-developers-make-money-coding-course-e09</id>
        <link href="https://danfleser.com/posts/20220204025140-mentoring-10-ways-developers-make-money-coding-course-e09"/>
        <updated>2022-02-04T02:51:40.190Z</updated>
        <content type="html"><![CDATA[
Have sharp skills in web development? A good way to make money is to educate others on how to build websites.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/Ni6Jlkj4Xuo"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Working As A Professional Developer 10 Ways Developers Make Money Coding Course E08]]></title>
        <id>20220204025040-working-as-a-professional-developer-10-ways-developers-make-money-coding-course-e08</id>
        <link href="https://danfleser.com/posts/20220204025040-working-as-a-professional-developer-10-ways-developers-make-money-coding-course-e08"/>
        <updated>2022-02-04T02:50:40.390Z</updated>
        <content type="html"><![CDATA[
Many companies hire people remotely to create websites and applications for them. If your skill is good, then you can earn up to $500K/year by working full-time in these companies. Traveling and working remotely part-time is another way of living.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/uJKVk7cv3Dw"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Freelancing 10 Ways Developers Make Money Coding Course E07]]></title>
        <id>20220204024943-freelancing-10-ways-developers-make-money-coding-course-e07</id>
        <link href="https://danfleser.com/posts/20220204024943-freelancing-10-ways-developers-make-money-coding-course-e07"/>
        <updated>2022-02-04T02:49:43.321Z</updated>
        <content type="html"><![CDATA[
You can work for different types of clients from different countries while working from home.

You may know that the websites like freelancer, Fiverr & Upwork provide you with such opportunities.

If you can make yourself a brand, then there are many more opportunities for you like contacting direct clients, getting clients from Linked In and Twitter.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/JjGTrdJkiJs"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why&How To Blog 10 Ways Developers Make Money Coding Course E06]]></title>
        <id>20220204024814-why-how-to-blog-10-ways-developers-make-money-coding-course-e06</id>
        <link href="https://danfleser.com/posts/20220204024814-why-how-to-blog-10-ways-developers-make-money-coding-course-e06"/>
        <updated>2022-02-04T02:48:14.289Z</updated>
        <content type="html"><![CDATA[
Web Developers can make a passive income just by writing blog posts. You don't need to be an expert content writer. Just share your thoughts with other developers.

Consider, blog as an asset where you're giving someone a place to rent on a monthly/yearly basis.
You can start by sharing what you are learning if you do not have a blog yet. You can start with the platforms that already exist: medium, dev.to

It's all about traffic and the audience you can bring to your blog. After getting attention from viewers on your blog posts, you can then start selling them digital products and you can utilize affiliate marketing.

The required knowledge to make traffic:
SEO and Email marketing

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/E5XNUr04p7k"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software-as-a-service 10 Ways Developers Make Money from Home E05]]></title>
        <id>20220204024621-software-as-a-service-10-ways-developers-make-money-from-home-e05</id>
        <link href="https://danfleser.com/posts/20220204024621-software-as-a-service-10-ways-developers-make-money-from-home-e05"/>
        <updated>2022-02-04T02:46:21.561Z</updated>
        <content type="html"><![CDATA[
Make money by charging users for using your web application.

A SaaS is an application or website that allows people to sign up and pay for the service.

Analyze the market and explore people's needs and urges for a repeating process and build software by automatizing that process.

Focus on the demand. Try to understand customers and bring them real value.

Look at how your competitors are building their products. How big is this market? Is it growing? Are there enough potential customers so that you can build a successful business on top of it?

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/lnwifUqJ7HU"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Digital Products 10 Ways Developers Make Money Working from Home E04]]></title>
        <id>20220204024527-digital-products-10-ways-developers-make-money-working-from-home-e04</id>
        <link href="https://danfleser.com/posts/20220204024527-digital-products-10-ways-developers-make-money-working-from-home-e04"/>
        <updated>2022-02-04T02:45:27.070Z</updated>
        <content type="html"><![CDATA[
No matter what you build, there is a market for it online.

You can create courses, software, ebooks, or any digital product that you later distribute to customers worldwide.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/ORbLO2rjHaQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Online Courses 10 Ways Developers Make Money Working from Home E03]]></title>
        <id>20220204024416-online-courses-10-ways-developers-make-money-working-from-home-e03</id>
        <link href="https://danfleser.com/posts/20220204024416-online-courses-10-ways-developers-make-money-working-from-home-e03"/>
        <updated>2022-02-04T02:44:16.880Z</updated>
        <content type="html"><![CDATA[
Online education has become one of the most popular ways to teach and learn online. With a simple online course, you can build your reputation as an expert, increase your income, attract clients, boost your creativity and grow your community.

Are you passionate about teaching web development? Why not utilize it as a business opportunity and create your online course to start to earn money.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/zs4abEW9nNk"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Live Coding Streaming 10 Ways Developers Make Money Working from Home E02]]></title>
        <id>20220204024041-live-coding-streaming-10-ways-developers-make-money-working-from-home-e02</id>
        <link href="https://danfleser.com/posts/20220204024041-live-coding-streaming-10-ways-developers-make-money-working-from-home-e02"/>
        <updated>2022-02-04T02:40:41.555Z</updated>
        <content type="html"><![CDATA[
Live web development is a new and emerging source of income for web developers with the right skills.

Real-time live demonstrations of building web applications can be a very engaging experience for beginner developers who try to learn how to build web applications.

The goal is to show developers what the end-product should look like but also to help & engage them in their journey towards becoming great software engineers.

Earn money from live coding, teaching other people how to code, or simply showing your skills in front of thousands of people.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/d7jczFpBKl0"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Running A Youtube Channel - 10 Ways Developers Make Money Working from Home - E01]]></title>
        <id>20220204003211-running-a-youtube-channel---10-ways-developers-make-money-working-from-home---e01</id>
        <link href="https://danfleser.com/posts/20220204003211-running-a-youtube-channel---10-ways-developers-make-money-working-from-home---e01"/>
        <updated>2022-02-04T00:32:11.959Z</updated>
        <content type="html"><![CDATA[
YouTube is a great platform where you can make money by making videos on different topics or about things that you know or are passionate about.

If you're a web developer and know how to educate others on how to build websites, then it's time for you to start earning money by running a Youtube Channel.

The process is simple:
Create interesting content for the viewers.
Post your videos regularly & share them with your audience on social media.
Once, you'll start getting love from the audience in the shape of subscribers, likes & views. You can then monetize your channel from google AdSense, bring sponsors & do affiliate marketing.

In this video series, I share the best ways and how to increase your money income as a web developer while working from home.

<iframe
  className="w-full"
  height="400"
  src="https://www.youtube.com/embed/MMbp6eNk4Q8"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

👉 Subscribe to my youtube channel - [click here](https://bit.ly/31SdiZv)

Other parts:

1.  [👉 Running A Youtube Channel](https://youtu.be/MMbp6eNk4Q8)

    - How did I start YouTube?
    - MrBeast YouTube Growth Success
    - YouTube Niches
    - Recording software for YouTube videos - Obs is free
    - Video editing software for YouTube videos - Davinci Resolve is Free
    - Increase YouTube content engagement

2.  [👉 Live Coding & Streaming](https://youtu.be/d7jczFpBKl0)

    - Make money coding live
    - Set goals for your audience
    - Mentoring sessions

3.  [👉 Courses](https://youtu.be/zs4abEW9nNk)

    - Why create a course?
    - Youtube videos
    - How to create a course?
    - Create a course outline
    - Grow an audience
    - Platforms to sell a course
    - Publish course to your own website
    - Create your own Newsletter
    - Ways to Get People to Buy Your Products
    - Post-launch Discounts

4.  [👉 Digital Products](https://youtu.be/ORbLO2rjHaQ)

    - What products to create?
    - Why digital products?
    - Instant access
    - Where to sell?
    - How to create a product?
    - How to write a book Google Docs
    - Create page templates/Create page themes
    - What to do when you don’t have ideas? - boost ideas
    - Build an MVP
    - Create your own Newsletter
    - Growing Your Audience
    - Sell anything by Creating a Bundle

5.  [👉 Software-as-a-service](https://youtu.be/lnwifUqJ7HU)

    - What the hell is SaaS?
    - How to build a SaaS?
    - Ways to start
    - How to deal with competitors
    - Lean thinking
    - Build features that people actually use
    - How to Validate Feature and Product Ideas Before You Build
    - Choosing the Right Tech Stack for Your Project
    - Scaling tips
    - Trending Tech Stack
    - Choosing the Pricing model for your business
    - A typical validated learning process
    - Analysis Data
    - What is User testing?
    - What is Split testing?
    - Saas Marketing Examples

6.  [👉 Why&how To Blog](https://youtu.be/E5XNUr04p7k)

    - Why start blogging?
    - Write articles
    - How to increase Motivation as a Blogger
    - Stop thinking and start doing
    - Find your audience
    - What do you need to start blogging?
    - How to create a blog?
    - How to grow an audience
    - Create an email newsletter
    - How to make money blogging?
    - How to add Ads on the blog
    - How to Affiliate and Market a blog?
    - Make money via Sponsored posts
    - How to promote services and products?
    - Create content and get paid

7.  [👉 Freelancing](https://youtu.be/JjGTrdJkiJs)

    - How to create a website
    - Be Professional - Register an LLC
    - Why choose Freelancing?
    - How to start freelancing
    - Outsourcing
    - How to create a good portfolio
    - What a great portfolio should contain
    - How to charge for a website
    - Hourly Pricing
    - Project-based Pricing
    - Value-based Pricing
    - How to get clients?
    - Tips - how to get more clients
    - What are Google Ads
    - Keywords to bid as a freelancer
    - How to get more sales/conversions
    - Linkedin Ads Tips
    - Linkedin InMail Ads Tips
    - Build your own website
    - Freelancing platforms
    - Get clients fast as a freelancer

8.  [👉 Working As A Professional Developer](https://youtu.be/uJKVk7cv3Dw)

    - Opportunities When Starting Out
    - How to Prepare for a Job
    - Take Online Courses?
    - What College Taught Me
    - How to Learn Faster
    - Make Your Free Time Count
    - Effective Way to Improve Your Code by Reviewing Open Source Code
    - Start Creating an Mvp
    - Get Others Opinions
    - Find a Mentor
    - Create a Portfolio
    - Portfolio Website Checklist
    - Think Outside the Box
    - Be Professional
    - Job Application Tips
    - Tips for Great Job Interviews
    - Make Linkedin Profile Impressive

9.  [👉 Mentoring](https://youtu.be/Ni6Jlkj4Xuo)

    - Monetize tutoring
    - Practice your skills
    - How much to Charge for online mentoring?
    - Provide value mentoring and people will come like a stream

10. [👉 Contributing To Open Source](https://youtu.be/qVN9FIY0j4Y)
    - What is Open Source?
    - Can you make money with Open Source?
    - Github Sponsors
    - How to Engage people to Finance your work?
    - Start a Patreon
    - Set monthly audience goals
    - Benefits of Open Source as a web developer
    - Create a premium version of the Open Source project
    - What is Freemium software
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MEAN/MERN/MEVN vs LAMP vs Serverless]]></title>
        <id>20220203002942-mean-mern-mevn-vs-lamp-vs-serverless</id>
        <link href="https://danfleser.com/posts/20220203002942-mean-mern-mevn-vs-lamp-vs-serverless"/>
        <updated>2022-02-03T00:29:42.241Z</updated>
        <content type="html"><![CDATA[
# Which tech stack to use

MEAN is an open source, high-level, **Javascript-based stack** best used for building dynamic websites and applications.

<img src="/images/mean.png" alt="MEAN stack" />

The layers of MEAN are:

- [**MongoDB**](https://www.mongodb.com/): A NoSQL database that uses binary JSON documents with schema.
- [**Express.js**](https://expressjs.com/): A modular web application framework for Node.js.
- [**AngularJS**](https://angularjs.org/): A client-side application framework used to build end-user interfaces separate from the business logic. Can also be replaced with similar popular frontend frameworks like React or Vue.
- [**Node.js**](https://nodejs.org/en/): An application runtime environment that represents the “JavaScript everywhere” paradigm that MEAN is known for.

Used by Netflix, Paypal, The Weather Channel, and Forbes.

**Pros**

- All tools are open source and use JavaScript, allowing for full-stack development.
- Great performance for SPAs.
- Usable on any operating system.

**Cons**

- Hard to adopt into existing architectures that don't use JavaScript.
- Risk losing data during heavy workflows.
- Maintenance can be a hassle, frequent updates and changes.

# MERN

The MERN stack is a variation on MEAN that replaces Angular with [React](https://reactjs.org/).

<img src="/images/react-mern.png" alt="MERN stack" />

**Pros**

- Build a simple to intermediate single-page application in the quickest time possible.
- Optimized for SPAs.
- There are more React developers than Angular developers.

**Cons**

- Sacrificing some functionality without a full framework

# MEVN

Similar to MERN, MEVN replaces Angular with [Vue.js](https://vuejs.org/).

**Pros**

- Faster performance than React and Angular
- Ready to go right out of the box
- Cost-effective due to simplicity to use

**Cons**

- Might lack some resources, as is the least popular of the three frameworks
- Scalability is not a big plus so don’t plan to add any fancy application features.

LAMP is the world’s **most popular tech stack**, designed to build applications without reliance on external software or data.

The layers of LAMP are

- [**Linux**](https://www.linux.org/): An open source, Unix-like operating system consisting of a package management system around a Linux kernel.
- [**Apache web server**](https://httpd.apache.org/): A highly popular and fully-featured web server, used by 54% of all sites on the web.
- [**MySQL**](https://www.mysql.com/): A multithreaded SQL relational database management system built for at-scale use.
- [**PHP**](https://www.php.net/): A server-side scripting language designed for web development.

**Pros**

- Widespread support for each technology in the stack.
- Mature stack with a wealth of previous solutions and customizations to draw from.
- Non-blocking structure makes it easy to scale and faster to develop.
- LAMP is fully open source.
- PHP and MySQL are easy to learn and work with.

**Cons**

- Limited to only Linux operating system.
- Difficult to switch between backend and frontend tools.
- Projected to decline in use over time due to the prevalence of JavaScript and the cloud.

# Serverless

Nowdays companies shift from managing their own app infrastructure to instead building cloud-native serverless applications.

**Pros**

- Perfect for small startup that cannot afford to hire a full team to manage your application’s tech stack
- Cost-effective for small businesses and startups.
- No need to manage or maintain your own technologies.

**Cons**

- Less control over what technologies are in the stack.
- Scaling costs will make this ineffective beyond a certain size.

How do you choose?

**You’ll want to consider**

- What type of app will it be? Cloud-based, hybrid, etc.?
- What is the expected lifetime of this application?
- What technologies are available in my client’s infrastructure? Will it be standardized or varied?
- How much traffic will your application need to handle? Does the traffic happen in spikes or steady flow?
- How dynamic will your application be? Will it update in real time?
- How much retraining will your team need to do?
- How much maintenance do you want to allocate to the application?

As a general rule, MEAN is better for smaller-scale modern applications, like progressive web apps, cloud-based applications, or single-page applications. LAMP is better for larger-scale applications that prioritize uptime and availability.

You can use this the website [Stackshare](https://stackshare.io/) to check other companies tech stack.

<img src="/images/stackshare.png" alt="MERN stack" />
]]></content>
    </entry>
</feed>